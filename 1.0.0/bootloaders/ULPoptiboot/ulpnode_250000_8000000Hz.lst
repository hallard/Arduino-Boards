
ulpnode_250000_8000000Hz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007fe4  00000478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e4  00007c00  00007c00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .functable    0000000e  00007ff0  00007ff0  00000478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .version      00000002  00007ffe  00007ffe  00000486  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      00000011  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000499  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c5  00000000  00000000  000004c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000334  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000553  00000000  00000000  000011ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000336  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000083c  00000000  00000000  00001b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002376  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007c00 <main>:
#endif
#else
#define appstart_vec (0)
#endif // VIRTUAL_BOOT_PARTITION
/* main program starts here */
int main(void) {
    7c00:	cd b7       	in	r28, 0x3d	; 61
    7c02:	de b7       	in	r29, 0x3e	; 62
    7c04:	27 97       	sbiw	r28, 0x07	; 7
    7c06:	de bf       	out	0x3e, r29	; 62
    7c08:	cd bf       	out	0x3d, r28	; 61
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    7c0a:	11 24       	eor	r1, r1
   * modified Adaboot no-wait mod.
   * Pass the reset reason to app.  Also, it appears that an Uno poweron
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */
  ch = MCUSR;
    7c0c:	14 b7       	in	r17, 0x34	; 52
  MCUSR = 0;
    7c0e:	14 be       	out	0x34, r1	; 52

  // Clear LED values;
  led.r=led.g=led.b=0;
    7c10:	1e 82       	std	Y+6, r1	; 0x06
    7c12:	1c 82       	std	Y+4, r1	; 0x04
    7c14:	1d 82       	std	Y+5, r1	; 0x05
    #ifdef PWR_RF
      // Enable Pull Up on input before setting it output high 
      // see section 14.2.3 of datasheet
      //PWR_RF_PORT |= _BV(PWR_RF); 
      
      PWR_RF_DDR  |= _BV(PWR_RF); // Set pin as output 
    7c16:	57 9a       	sbi	0x0a, 7	; 10
      PWR_RF_PORT |= _BV(PWR_RF); // Set pin to 1 (disable powering sensors)
    7c18:	5f 9a       	sbi	0x0b, 7	; 11
    #ifdef PWR_SENSOR
      // Enable Pull Up on input before setting it output high 
      // see section 14.2.3 of datasheet
      //PWR_SENSOR_PORT |= _BV(PWR_SENSOR); 

      PWR_SENSOR_DDR  |= _BV(PWR_SENSOR); // Set pin as output 
    7c1a:	21 9a       	sbi	0x04, 1	; 4
      PWR_SENSOR_PORT |= _BV(PWR_SENSOR); // Set pin to 1 (disable powering module)
    7c1c:	29 9a       	sbi	0x05, 1	; 5
    #endif
    
    #ifdef WAKE_SWITCH
      //WAKE_SWITCH_DDR   &= ~_BV(WAKE_SWITCH); // Set switch pin as input 
      WAKE_SWITCH_PORT  |= _BV(WAKE_SWITCH);  // Activate pull up 
    7c1e:	5c 9a       	sbi	0x0b, 4	; 11
    #endif

    // Enable the booster 
    __bl_boosterMode(1);
    7c20:	81 e0       	ldi	r24, 0x01	; 1
    7c22:	78 d1       	rcall	.+752    	; 0x7f14 <__bl_boosterMode>
    
    // We're running at 4MHz but we have 16MHz crystal
    // divide per 4 so compiled code for 4MHz be happy (and working!)
    #ifdef ULPNODE
      // Set ULPNode cruise speed (4MHz)
      __bl_setCoreFrequency(4);
    7c24:	84 e0       	ldi	r24, 0x04	; 4
    7c26:	13 d1       	rcall	.+550    	; 0x7e4e <__bl_setCoreFrequency>
    // because this is surely what we want to do, or at least using serial
    
    //DDRD &= ~_BV(PIND0); // Set RX pin as input (not needed already at reset)
    
    // Serial port RX is bit 0, if FTDI is connected, we will enter bootloader
    if ( PIND & _BV(PIND0) )
    7c28:	48 9b       	sbis	0x09, 0	; 9
    7c2a:	02 c0       	rjmp	.+4      	; 0x7c30 <main+0x30>
    {
      // prepare led green value (avoid 255, we don't need all luminosity,
      // remember we want low power so avoid high consumption)
      led.g=32; 
    7c2c:	80 e2       	ldi	r24, 0x20	; 32
    7c2e:	8c 83       	std	Y+4, r24	; 0x04
    }
      
    #ifdef WAKE_SWITCH
      // Switch entry is low ? switch pressed we will enter bootloader
      if ( !(WAKE_SWITCH_PIN & _BV(WAKE_SWITCH)) )
    7c30:	4c 99       	sbic	0x09, 4	; 9
    7c32:	02 c0       	rjmp	.+4      	; 0x7c38 <main+0x38>
      {
        // prepare led BLUE value (avoid 255, we don't need all luminosity,
        // remember we want low power so avoid high consumption)
        led.b=32; 
    7c34:	80 e2       	ldi	r24, 0x20	; 32
    7c36:	8e 83       	std	Y+6, r24	; 0x06
      }
    #endif
    
    // no FTDI or wake switch pressed ? direct boot, no bootloader
    if ((!(ch & _BV(EXTRF))) || (led.g==0 && led.b==0)) 
    7c38:	11 ff       	sbrs	r17, 1
    7c3a:	06 c0       	rjmp	.+12     	; 0x7c48 <main+0x48>
    7c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    7c3e:	81 11       	cpse	r24, r1
    7c40:	05 c0       	rjmp	.+10     	; 0x7c4c <main+0x4c>
    7c42:	8e 81       	ldd	r24, Y+6	; 0x06
    7c44:	81 11       	cpse	r24, r1
    7c46:	02 c0       	rjmp	.+4      	; 0x7c4c <main+0x4c>
      appStart(ch);
    7c48:	81 2f       	mov	r24, r17
    7c4a:	97 d1       	rcall	.+814    	; 0x7f7a <appStart>

  // From now, sure we want to use the bootloader so prepare our job
  // after upload or time out, reset will be triggered by watchdog

  // Set Default ULPNode speed 
  __bl_setCoreFrequency(FREQ_MHZ);
    7c4c:	88 e0       	ldi	r24, 0x08	; 8
    7c4e:	ff d0       	rcall	.+510    	; 0x7e4e <__bl_setCoreFrequency>
  //clock_prescale_set(clock_div_2);
  

  // powering the sensors and RGB LED if wa want to blink it
  #if defined (PWR_SENSOR) && defined (WS2812) && (LED_START_FLASHES > 0)
    PWR_SENSOR_PORT &= ~_BV(PWR_SENSOR); // Set pin to 0 (enable powering module)
    7c50:	29 98       	cbi	0x05, 1	; 5
  // Indicate we've entered into bootloading sequence and save
  // we need this because we go out from bootloader by watchdog
  // so it's difficult to really know in application what really
  // caused us to start/restart
  #ifdef EEP_FLAGS_BOOTLOADER
  eeprom_update_byte(EEP_FLAGS_BOOTLOADER, 0x01);
    7c52:	61 e0       	ldi	r22, 0x01	; 1
    7c54:	8e ef       	ldi	r24, 0xFE	; 254
    7c56:	93 e0       	ldi	r25, 0x03	; 3
    7c58:	a5 d1       	rcall	.+842    	; 0x7fa4 <__eeupd_byte_m328p>
  #endif

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7c5a:	85 e0       	ldi	r24, 0x05	; 5
    7c5c:	80 93 81 00 	sts	0x0081, r24
  
  #if defined (LED) || defined(LED_DATA_FLASH)
    // Set LED pin as output 
    LED_DDR |= _BV(LED);
    7c60:	55 9a       	sbi	0x0a, 5	; 10
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    7c62:	82 e0       	ldi	r24, 0x02	; 2
    7c64:	80 93 c0 00 	sts	0x00C0, r24
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    7c68:	88 e1       	ldi	r24, 0x18	; 24
    7c6a:	80 93 c1 00 	sts	0x00C1, r24
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    7c6e:	86 e0       	ldi	r24, 0x06	; 6
    7c70:	80 93 c2 00 	sts	0x00C2, r24
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7c74:	83 e0       	ldi	r24, 0x03	; 3
    7c76:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 1S
  watchdogConfig(WATCHDOG_1S);
    7c7a:	8e e0       	ldi	r24, 0x0E	; 14
    7c7c:	69 d1       	rcall	.+722    	; 0x7f50 <watchdogConfig>
  struct cRGB led_off;
  uint8_t * pled;
  uint8_t count = LED_START_FLASHES * 2 ;
  
  // Initialize led off values;
  led_off.r=led_off.g=led_off.b=0;
    7c7e:	1b 82       	std	Y+3, r1	; 0x03
    7c80:	19 82       	std	Y+1, r1	; 0x01
    7c82:	1a 82       	std	Y+2, r1	; 0x02
    7c84:	66 e0       	ldi	r22, 0x06	; 6
    7c86:	f6 2e       	mov	r15, r22
  #endif 

  do 
  {
    TCNT1 = -(F_CPU/(1024*16));
    7c88:	08 e1       	ldi	r16, 0x18	; 24
    7c8a:	1e ef       	ldi	r17, 0xFE	; 254
    TIFR1 = _BV(TOV1);
    7c8c:	ee 24       	eor	r14, r14
    7c8e:	e3 94       	inc	r14
  led_off.r=led_off.g=led_off.b=0;
  #endif 

  do 
  {
    TCNT1 = -(F_CPU/(1024*16));
    7c90:	10 93 85 00 	sts	0x0085, r17
    7c94:	00 93 84 00 	sts	0x0084, r16
    TIFR1 = _BV(TOV1);
    7c98:	e6 ba       	out	0x16, r14	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7c9a:	b0 9b       	sbis	0x16, 0	; 22
    7c9c:	fe cf       	rjmp	.-4      	; 0x7c9a <main+0x9a>
    #ifdef LED
    #if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
        LED_PORT ^= _BV(LED);
    #else
        LED_PIN |= _BV(LED);
    7c9e:	4d 9a       	sbi	0x09, 5	; 9
  putch(STK_INSYNC);
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7ca0:	a8 95       	wdr
    #endif
    #endif
    watchdogReset();
    #ifdef WS2812
    if (count%2 == 0 )
      pled = (uint8_t *) &led; 
    7ca2:	ce 01       	movw	r24, r28
        LED_PIN |= _BV(LED);
    #endif
    #endif
    watchdogReset();
    #ifdef WS2812
    if (count%2 == 0 )
    7ca4:	f0 fe       	sbrs	r15, 0
    7ca6:	02 c0       	rjmp	.+4      	; 0x7cac <main+0xac>
      pled = (uint8_t *) &led; 
    else
      pled = (uint8_t *) &led_off;
    7ca8:	01 96       	adiw	r24, 0x01	; 1
    7caa:	01 c0       	rjmp	.+2      	; 0x7cae <main+0xae>
    #endif
    #endif
    watchdogReset();
    #ifdef WS2812
    if (count%2 == 0 )
      pled = (uint8_t *) &led; 
    7cac:	04 96       	adiw	r24, 0x04	; 4
    else
      pled = (uint8_t *) &led_off;

    // transmit values to 1 LED (3 values, R,G,B)
    __bl_showLED(pled,3);
    7cae:	63 e0       	ldi	r22, 0x03	; 3
    7cb0:	70 e0       	ldi	r23, 0x00	; 0
    7cb2:	ec d0       	rcall	.+472    	; 0x7e8c <__bl_showLED>
    7cb4:	fa 94       	dec	r15
    //_delay_us(50);
    #endif
  } 
  while (--count);
    7cb6:	61 f7       	brne	.-40     	; 0x7c90 <main+0x90>
    7cb8:	00 e0       	ldi	r16, 0x00	; 0
    7cba:	10 e0       	ldi	r17, 0x00	; 0
    else if(ch == STK_READ_PAGE) {
      uint8_t desttype;
      
      // reading from flash, green blink
      #if defined(WS2812) && defined(LED_DATA_FLASH)
        led.g = 32;
    7cbc:	30 e2       	ldi	r19, 0x20	; 32
    7cbe:	d3 2e       	mov	r13, r19
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7cc0:	cc 24       	eor	r12, r12
    7cc2:	c3 94       	inc	r12
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    7cc4:	45 e0       	ldi	r20, 0x05	; 5
    7cc6:	b4 2e       	mov	r11, r20
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    7cc8:	51 e1       	ldi	r21, 0x11	; 17
    7cca:	a5 2e       	mov	r10, r21

  /* Forever loop: exits by causing WDT reset */
  for (;;) 
  {
    /* get character from UART */
    ch = getch();
    7ccc:	35 d1       	rcall	.+618    	; 0x7f38 <getch>
    
    if(ch == STK_GET_PARAMETER) {
    7cce:	81 34       	cpi	r24, 0x41	; 65
    7cd0:	79 f4       	brne	.+30     	; 0x7cf0 <main+0xf0>
      unsigned char which = getch();
    7cd2:	32 d1       	rcall	.+612    	; 0x7f38 <getch>
      verifySpace();
    7cd4:	8f 83       	std	Y+7, r24	; 0x07
    7cd6:	42 d1       	rcall	.+644    	; 0x7f5c <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == 0x82) {
    7cd8:	8f 81       	ldd	r24, Y+7	; 0x07
    7cda:	82 38       	cpi	r24, 0x82	; 130
    7cdc:	11 f4       	brne	.+4      	; 0x7ce2 <main+0xe2>
	  putch(optiboot_version & 0xFF);
    7cde:	82 e0       	ldi	r24, 0x02	; 2
    7ce0:	05 c0       	rjmp	.+10     	; 0x7cec <main+0xec>
      } else if (which == 0x81) {
    7ce2:	81 38       	cpi	r24, 0x81	; 129
    7ce4:	11 f4       	brne	.+4      	; 0x7cea <main+0xea>
	  putch(optiboot_version >> 8);
    7ce6:	85 e0       	ldi	r24, 0x05	; 5
    7ce8:	01 c0       	rjmp	.+2      	; 0x7cec <main+0xec>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    7cea:	83 e0       	ldi	r24, 0x03	; 3
    7cec:	1e d1       	rcall	.+572    	; 0x7f2a <putch>
    7cee:	ac c0       	rjmp	.+344    	; 0x7e48 <main+0x248>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7cf0:	82 34       	cpi	r24, 0x42	; 66
    7cf2:	11 f4       	brne	.+4      	; 0x7cf8 <main+0xf8>
      // SET DEVICE is ignored
      getNch(20);
    7cf4:	84 e1       	ldi	r24, 0x14	; 20
    7cf6:	03 c0       	rjmp	.+6      	; 0x7cfe <main+0xfe>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7cf8:	85 34       	cpi	r24, 0x45	; 69
    7cfa:	19 f4       	brne	.+6      	; 0x7d02 <main+0x102>
      // SET DEVICE EXT is ignored
      getNch(5);
    7cfc:	85 e0       	ldi	r24, 0x05	; 5
    7cfe:	36 d1       	rcall	.+620    	; 0x7f6c <getNch>
    7d00:	a3 c0       	rjmp	.+326    	; 0x7e48 <main+0x248>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7d02:	85 35       	cpi	r24, 0x55	; 85
    7d04:	41 f4       	brne	.+16     	; 0x7d16 <main+0x116>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7d06:	18 d1       	rcall	.+560    	; 0x7f38 <getch>
    7d08:	08 2f       	mov	r16, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7d0a:	16 d1       	rcall	.+556    	; 0x7f38 <getch>
    7d0c:	10 e0       	ldi	r17, 0x00	; 0
    7d0e:	18 2b       	or	r17, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7d10:	00 0f       	add	r16, r16
    7d12:	11 1f       	adc	r17, r17
    7d14:	98 c0       	rjmp	.+304    	; 0x7e46 <main+0x246>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    7d16:	86 35       	cpi	r24, 0x56	; 86
    7d18:	21 f4       	brne	.+8      	; 0x7d22 <main+0x122>
      // UNIVERSAL command is ignored
      getNch(4);
    7d1a:	84 e0       	ldi	r24, 0x04	; 4
    7d1c:	27 d1       	rcall	.+590    	; 0x7f6c <getNch>
      putch(0x00);
    7d1e:	80 e0       	ldi	r24, 0x00	; 0
    7d20:	e5 cf       	rjmp	.-54     	; 0x7cec <main+0xec>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7d22:	84 36       	cpi	r24, 0x64	; 100
    7d24:	09 f0       	breq	.+2      	; 0x7d28 <main+0x128>
    7d26:	58 c0       	rjmp	.+176    	; 0x7dd8 <main+0x1d8>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      
      // Writing to flash, red blink
      #if defined(WS2812) && defined(LED_DATA_FLASH)
        led.r = 32;
    7d28:	dd 82       	std	Y+5, r13	; 0x05
        led.g = led.b = 0;
    7d2a:	1e 82       	std	Y+6, r1	; 0x06
    7d2c:	1c 82       	std	Y+4, r1	; 0x04
        pled = (uint8_t *) &led; 

        // transmit values to 1 LED (3 values, R,G,B)
        __bl_showLED(pled,3);
    7d2e:	63 e0       	ldi	r22, 0x03	; 3
    7d30:	70 e0       	ldi	r23, 0x00	; 0
    7d32:	ce 01       	movw	r24, r28
    7d34:	04 96       	adiw	r24, 0x04	; 4
    7d36:	aa d0       	rcall	.+340    	; 0x7e8c <__bl_showLED>
        
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    7d38:	ff d0       	rcall	.+510    	; 0x7f38 <getch>
    7d3a:	fe d0       	rcall	.+508    	; 0x7f38 <getch>
    7d3c:	78 2e       	mov	r7, r24
      savelength = length;
      desttype = getch();
    7d3e:	fc d0       	rcall	.+504    	; 0x7f38 <getch>
    7d40:	98 2e       	mov	r9, r24
    7d42:	e1 2c       	mov	r14, r1
    7d44:	ff 24       	eor	r15, r15
    7d46:	f3 94       	inc	r15

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    7d48:	f7 d0       	rcall	.+494    	; 0x7f38 <getch>
    7d4a:	f7 01       	movw	r30, r14
    7d4c:	81 93       	st	Z+, r24
    7d4e:	7f 01       	movw	r14, r30
      while (--length);
    7d50:	7e 12       	cpse	r7, r30
    7d52:	fa cf       	rjmp	.-12     	; 0x7d48 <main+0x148>

      // Read command terminator, start reply
      verifySpace();
    7d54:	03 d1       	rcall	.+518    	; 0x7f5c <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    7d56:	f5 e4       	ldi	r31, 0x45	; 69
    7d58:	9f 12       	cpse	r9, r31
    7d5a:	10 c0       	rjmp	.+32     	; 0x7d7c <main+0x17c>
    7d5c:	48 01       	movw	r8, r16
    7d5e:	e1 2c       	mov	r14, r1
    7d60:	ff 24       	eor	r15, r15
    7d62:	f3 94       	inc	r15
    case 'E': // EEPROM
#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
        while(len--) {
    7d64:	7e 14       	cp	r7, r14
    7d66:	09 f4       	brne	.+2      	; 0x7d6a <main+0x16a>
    7d68:	2d c0       	rjmp	.+90     	; 0x7dc4 <main+0x1c4>
	    eeprom_write_byte((uint8_t *)(address++), *mybuff++);
    7d6a:	f7 01       	movw	r30, r14
    7d6c:	61 91       	ld	r22, Z+
    7d6e:	7f 01       	movw	r14, r30
    7d70:	c4 01       	movw	r24, r8
    7d72:	2a d1       	rcall	.+596    	; 0x7fc8 <__eewr_byte_m328p>
    7d74:	ff ef       	ldi	r31, 0xFF	; 255
    7d76:	8f 1a       	sub	r8, r31
    7d78:	9f 0a       	sbc	r9, r31
    7d7a:	f4 cf       	rjmp	.-24     	; 0x7d64 <main+0x164>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    7d7c:	83 e0       	ldi	r24, 0x03	; 3
    7d7e:	f8 01       	movw	r30, r16
    7d80:	87 bf       	out	0x37, r24	; 55
    7d82:	e8 95       	spm
	    boot_spm_busy_wait();
    7d84:	07 b6       	in	r0, 0x37	; 55
    7d86:	00 fc       	sbrc	r0, 0
    7d88:	fd cf       	rjmp	.-6      	; 0x7d84 <main+0x184>
    7d8a:	a8 01       	movw	r20, r16
    7d8c:	a0 e0       	ldi	r26, 0x00	; 0
    7d8e:	b1 e0       	ldi	r27, 0x01	; 1
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    7d90:	8c 91       	ld	r24, X
    7d92:	12 96       	adiw	r26, 0x02	; 2
    7d94:	9d 01       	movw	r18, r26
    7d96:	21 50       	subi	r18, 0x01	; 1
    7d98:	31 09       	sbc	r19, r1
		a |= (*bufPtr++) << 8;
    7d9a:	f9 01       	movw	r30, r18
    7d9c:	20 81       	ld	r18, Z
    7d9e:	90 e0       	ldi	r25, 0x00	; 0
    7da0:	92 2b       	or	r25, r18
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7da2:	fa 01       	movw	r30, r20
    7da4:	0c 01       	movw	r0, r24
    7da6:	c7 be       	out	0x37, r12	; 55
    7da8:	e8 95       	spm
    7daa:	11 24       	eor	r1, r1
		addrPtr += 2;
    7dac:	4e 5f       	subi	r20, 0xFE	; 254
    7dae:	5f 4f       	sbci	r21, 0xFF	; 255
	    } while (len -= 2);
    7db0:	7a 12       	cpse	r7, r26
    7db2:	ee cf       	rjmp	.-36     	; 0x7d90 <main+0x190>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    7db4:	f8 01       	movw	r30, r16
    7db6:	b7 be       	out	0x37, r11	; 55
    7db8:	e8 95       	spm
	    boot_spm_busy_wait();
    7dba:	07 b6       	in	r0, 0x37	; 55
    7dbc:	00 fc       	sbrc	r0, 0
    7dbe:	fd cf       	rjmp	.-6      	; 0x7dba <main+0x1ba>
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    7dc0:	a7 be       	out	0x37, r10	; 55
    7dc2:	e8 95       	spm
      writebuffer(desttype, buff, address, savelength);
      
      #if defined(WS2812) && defined(LED_DATA_FLASH)
        // led off
        pled = (uint8_t *) &led_off;
        __bl_showLED(pled,3);
    7dc4:	63 e0       	ldi	r22, 0x03	; 3
    7dc6:	70 e0       	ldi	r23, 0x00	; 0
    7dc8:	ce 01       	movw	r24, r28
    7dca:	01 96       	adiw	r24, 0x01	; 1
    7dcc:	5f d0       	rcall	.+190    	; 0x7e8c <__bl_showLED>
      #endif
      
      // Mainly if we're there, we uploaded a sketch
      #ifdef EEP_FLAGS_FLASH_WRITE
      eeprom_update_byte(EEP_FLAGS_FLASH_WRITE, 0x03);
    7dce:	63 e0       	ldi	r22, 0x03	; 3
    7dd0:	8c ef       	ldi	r24, 0xFC	; 252
    7dd2:	93 e0       	ldi	r25, 0x03	; 3
    7dd4:	e7 d0       	rcall	.+462    	; 0x7fa4 <__eeupd_byte_m328p>
    7dd6:	38 c0       	rjmp	.+112    	; 0x7e48 <main+0x248>
      #endif
      
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7dd8:	84 37       	cpi	r24, 0x74	; 116
    7dda:	41 f5       	brne	.+80     	; 0x7e2c <main+0x22c>
      uint8_t desttype;
      
      // reading from flash, green blink
      #if defined(WS2812) && defined(LED_DATA_FLASH)
        led.g = 32;
    7ddc:	dc 82       	std	Y+4, r13	; 0x04
        led.r = led.b = 0;
    7dde:	1e 82       	std	Y+6, r1	; 0x06
    7de0:	1d 82       	std	Y+5, r1	; 0x05
        pled = (uint8_t *) &led; 

        // transmit values to 1 LED (3 values, R,G,B)
        __bl_showLED(pled,3);
    7de2:	63 e0       	ldi	r22, 0x03	; 3
    7de4:	70 e0       	ldi	r23, 0x00	; 0
    7de6:	ce 01       	movw	r24, r28
    7de8:	04 96       	adiw	r24, 0x04	; 4
    7dea:	50 d0       	rcall	.+160    	; 0x7e8c <__bl_showLED>
      #endif
      

      GETLENGTH(length);
    7dec:	a5 d0       	rcall	.+330    	; 0x7f38 <getch>
    7dee:	a4 d0       	rcall	.+328    	; 0x7f38 <getch>
    7df0:	98 2e       	mov	r9, r24
      desttype = getch();
    7df2:	a2 d0       	rcall	.+324    	; 0x7f38 <getch>
      verifySpace();
    7df4:	8f 83       	std	Y+7, r24	; 0x07
    7df6:	b2 d0       	rcall	.+356    	; 0x7f5c <verifySpace>

static inline void read_mem(uint8_t memtype, uint16_t address, pagelen_t length)
{
    uint8_t ch;

    switch (memtype) {
    7df8:	8f 81       	ldd	r24, Y+7	; 0x07
    7dfa:	78 01       	movw	r14, r16
    7dfc:	85 34       	cpi	r24, 0x45	; 69
    7dfe:	79 f4       	brne	.+30     	; 0x7e1e <main+0x21e>
    7e00:	90 0e       	add	r9, r16

#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
    case 'E': // EEPROM
	do {
	    putch(eeprom_read_byte((uint8_t *)(address++)));
    7e02:	c7 01       	movw	r24, r14
    7e04:	c7 d0       	rcall	.+398    	; 0x7f94 <__eerd_byte_m328p>
    7e06:	91 d0       	rcall	.+290    	; 0x7f2a <putch>
    7e08:	ff ef       	ldi	r31, 0xFF	; 255
    7e0a:	ef 1a       	sub	r14, r31
    7e0c:	ff 0a       	sbc	r15, r31
	} while (--length);
    7e0e:	9e 10       	cpse	r9, r14
    7e10:	f8 cf       	rjmp	.-16     	; 0x7e02 <main+0x202>
      
      
      #if defined(WS2812) && defined(LED_DATA_FLASH)
        // led off
        pled = (uint8_t *) &led_off;
        __bl_showLED(pled,3);
    7e12:	63 e0       	ldi	r22, 0x03	; 3
    7e14:	70 e0       	ldi	r23, 0x00	; 0
    7e16:	ce 01       	movw	r24, r28
    7e18:	01 96       	adiw	r24, 0x01	; 1
    7e1a:	38 d0       	rcall	.+112    	; 0x7e8c <__bl_showLED>
    7e1c:	15 c0       	rjmp	.+42     	; 0x7e48 <main+0x248>
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
    7e1e:	f7 01       	movw	r30, r14
    7e20:	85 91       	lpm	r24, Z+
    7e22:	7f 01       	movw	r14, r30
    7e24:	82 d0       	rcall	.+260    	; 0x7f2a <putch>
	} while (--length);
    7e26:	9a 94       	dec	r9
    7e28:	d1 f7       	brne	.-12     	; 0x7e1e <main+0x21e>
    7e2a:	f3 cf       	rjmp	.-26     	; 0x7e12 <main+0x212>
      eeprom_update_byte(EEP_FLAGS_FLASH_READ, 0x02);
      #endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7e2c:	85 37       	cpi	r24, 0x75	; 117
    7e2e:	39 f4       	brne	.+14     	; 0x7e3e <main+0x23e>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7e30:	95 d0       	rcall	.+298    	; 0x7f5c <verifySpace>
      putch(SIGNATURE_0);
    7e32:	8e e1       	ldi	r24, 0x1E	; 30
    7e34:	7a d0       	rcall	.+244    	; 0x7f2a <putch>
      putch(SIGNATURE_1);
    7e36:	85 e9       	ldi	r24, 0x95	; 149
    7e38:	78 d0       	rcall	.+240    	; 0x7f2a <putch>
      putch(SIGNATURE_2);
    7e3a:	8f e0       	ldi	r24, 0x0F	; 15
    7e3c:	57 cf       	rjmp	.-338    	; 0x7cec <main+0xec>
    
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7e3e:	81 35       	cpi	r24, 0x51	; 81
    7e40:	11 f4       	brne	.+4      	; 0x7e46 <main+0x246>
      #ifdef EEP_FLAGS_STK_LEAVE_PROG
      eeprom_update_byte(EEP_FLAGS_STK_LEAVE_PROG, 0x04);
      #endif
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7e42:	88 e0       	ldi	r24, 0x08	; 8
    7e44:	85 d0       	rcall	.+266    	; 0x7f50 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7e46:	8a d0       	rcall	.+276    	; 0x7f5c <verifySpace>
    }
    putch(STK_OK);
    7e48:	80 e1       	ldi	r24, 0x10	; 16
    7e4a:	6f d0       	rcall	.+222    	; 0x7f2a <putch>

  }
    7e4c:	3f cf       	rjmp	.-386    	; 0x7ccc <main+0xcc>

00007e4e <__bl_setCoreFrequency>:
void __bl_setCoreFrequency(uint8_t freq)
{
  clock_div_t clock_div;
  
  // Remember ULPNode has a 16MHz crystal
  if (freq == 8)
    7e4e:	88 30       	cpi	r24, 0x08	; 8
    7e50:	49 f0       	breq	.+18     	; 0x7e64 <__bl_setCoreFrequency+0x16>
    clock_div = clock_div_2;
  else if (freq == 4)
    7e52:	84 30       	cpi	r24, 0x04	; 4
    7e54:	51 f0       	breq	.+20     	; 0x7e6a <__bl_setCoreFrequency+0x1c>
    clock_div = clock_div_4;
  else if (freq == 2)
    7e56:	82 30       	cpi	r24, 0x02	; 2
    7e58:	59 f0       	breq	.+22     	; 0x7e70 <__bl_setCoreFrequency+0x22>
    clock_div = clock_div_8;
  else if (freq == 1)
    7e5a:	81 30       	cpi	r24, 0x01	; 1
    7e5c:	61 f4       	brne	.+24     	; 0x7e76 <__bl_setCoreFrequency+0x28>
    clock_div = clock_div_16;
    7e5e:	84 e0       	ldi	r24, 0x04	; 4
    7e60:	90 e0       	ldi	r25, 0x00	; 0
    7e62:	0b c0       	rjmp	.+22     	; 0x7e7a <__bl_setCoreFrequency+0x2c>
{
  clock_div_t clock_div;
  
  // Remember ULPNode has a 16MHz crystal
  if (freq == 8)
    clock_div = clock_div_2;
    7e64:	81 e0       	ldi	r24, 0x01	; 1
    7e66:	90 e0       	ldi	r25, 0x00	; 0
    7e68:	08 c0       	rjmp	.+16     	; 0x7e7a <__bl_setCoreFrequency+0x2c>
  else if (freq == 4)
    clock_div = clock_div_4;
    7e6a:	82 e0       	ldi	r24, 0x02	; 2
    7e6c:	90 e0       	ldi	r25, 0x00	; 0
    7e6e:	05 c0       	rjmp	.+10     	; 0x7e7a <__bl_setCoreFrequency+0x2c>
  else if (freq == 2)
    clock_div = clock_div_8;
    7e70:	83 e0       	ldi	r24, 0x03	; 3
    7e72:	90 e0       	ldi	r25, 0x00	; 0
    7e74:	02 c0       	rjmp	.+4      	; 0x7e7a <__bl_setCoreFrequency+0x2c>
  else if (freq == 1)
    clock_div = clock_div_16;
  else  // default or error => Full speed
    clock_div = clock_div_1;
    7e76:	80 e0       	ldi	r24, 0x00	; 0
    7e78:	90 e0       	ldi	r25, 0x00	; 0
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    7e7a:	20 e8       	ldi	r18, 0x80	; 128
    7e7c:	0f b6       	in	r0, 0x3f	; 63
    7e7e:	f8 94       	cli
    7e80:	20 93 61 00 	sts	0x0061, r18
    7e84:	80 93 61 00 	sts	0x0061, r24
    7e88:	0f be       	out	0x3f, r0	; 63
    7e8a:	08 95       	ret

00007e8c <__bl_showLED>:
          clock speed is changed and restored after
          bootloader code is okay for that but pay attention when
          calling from sketch
====================================================================== */
void  __bl_showLED(uint8_t *data, uint16_t datlen)
{
    7e8c:	cf 92       	push	r12
    7e8e:	df 92       	push	r13
    7e90:	ef 92       	push	r14
    7e92:	ff 92       	push	r15
    7e94:	0f 93       	push	r16
    7e96:	1f 93       	push	r17
    7e98:	cf 93       	push	r28
    7e9a:	df 93       	push	r29
    7e9c:	00 d0       	rcall	.+0      	; 0x7e9e <__bl_showLED+0x12>
    7e9e:	cd b7       	in	r28, 0x3d	; 61
    7ea0:	de b7       	in	r29, 0x3e	; 62
    7ea2:	6c 01       	movw	r12, r24
    7ea4:	7b 01       	movw	r14, r22
  uint8_t curbyte,ctr,masklo,maskhi;
  uint8_t sreg_prev;
  
  // Save current clock speed 
  clock_div_t clock_prev = clock_prescale_get();
    7ea6:	00 91 61 00 	lds	r16, 0x0061
    7eaa:	0f 70       	andi	r16, 0x0F	; 15
    7eac:	10 e0       	ldi	r17, 0x00	; 0
  
  // Set control pin as output
  WS2812_DDR |= _BV(WS2812); 
    7eae:	56 9a       	sbi	0x0a, 6	; 10

  masklo = ~_BV(WS2812) & WS2812_PORT;
    7eb0:	9b b1       	in	r25, 0x0b	; 11
    7eb2:	9f 7b       	andi	r25, 0xBF	; 191
  maskhi =  _BV(WS2812) | WS2812_PORT;
    7eb4:	2b b1       	in	r18, 0x0b	; 11
    7eb6:	20 64       	ori	r18, 0x40	; 64
  
  // Fixed to compiled Frequency
  __bl_setCoreFrequency(FREQ_MHZ);
    7eb8:	88 e0       	ldi	r24, 0x08	; 8
    7eba:	2a 83       	std	Y+2, r18	; 0x02
    7ebc:	99 83       	std	Y+1, r25	; 0x01
    7ebe:	c7 df       	rcall	.-114    	; 0x7e4e <__bl_setCoreFrequency>
  
  // don't be interrupt intrusive, we'll restore current state
  sreg_prev=SREG;
    7ec0:	8f b7       	in	r24, 0x3f	; 63
  cli();  
    7ec2:	f8 94       	cli
    7ec4:	f6 01       	movw	r30, r12
    7ec6:	ec 0c       	add	r14, r12
    7ec8:	fd 1c       	adc	r15, r13

  // loop thru all buffer
  while (datlen--) 
    7eca:	2a 81       	ldd	r18, Y+2	; 0x02
    7ecc:	99 81       	ldd	r25, Y+1	; 0x01
    7ece:	ee 15       	cp	r30, r14
    7ed0:	ff 05       	cpc	r31, r15
    7ed2:	61 f0       	breq	.+24     	; 0x7eec <loop154+0x14>
  {
    curbyte=*data++;
    7ed4:	31 91       	ld	r19, Z+
    
    asm volatile(
    7ed6:	48 e0       	ldi	r20, 0x08	; 8

00007ed8 <loop154>:
    7ed8:	2b b9       	out	0x0b, r18	; 11
    7eda:	37 ff       	sbrs	r19, 7
    7edc:	9b b9       	out	0x0b, r25	; 11
    7ede:	33 0f       	add	r19, r19
    7ee0:	00 00       	nop
    7ee2:	00 c0       	rjmp	.+0      	; 0x7ee4 <loop154+0xc>
    7ee4:	9b b9       	out	0x0b, r25	; 11
    7ee6:	4a 95       	dec	r20
    7ee8:	b9 f7       	brne	.-18     	; 0x7ed8 <loop154>
    7eea:	f1 cf       	rjmp	.-30     	; 0x7ece <__bl_showLED+0x42>
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(WS2812_PORT)), "r" (maskhi), "r" (masklo)
    );
  }
  
  // Restore original IRQ state
  SREG=sreg_prev; 
    7eec:	8f bf       	out	0x3f, r24	; 63
    7eee:	80 e8       	ldi	r24, 0x80	; 128
    7ef0:	0f b6       	in	r0, 0x3f	; 63
    7ef2:	f8 94       	cli
    7ef4:	80 93 61 00 	sts	0x0061, r24
    7ef8:	00 93 61 00 	sts	0x0061, r16
    7efc:	0f be       	out	0x3f, r0	; 63
  
  // Restore clock speed (in fact restore divider)
  clock_prescale_set(clock_prev);
}
    7efe:	0f 90       	pop	r0
    7f00:	0f 90       	pop	r0
    7f02:	df 91       	pop	r29
    7f04:	cf 91       	pop	r28
    7f06:	1f 91       	pop	r17
    7f08:	0f 91       	pop	r16
    7f0a:	ff 90       	pop	r15
    7f0c:	ef 90       	pop	r14
    7f0e:	df 90       	pop	r13
    7f10:	cf 90       	pop	r12
    7f12:	08 95       	ret

00007f14 <__bl_boosterMode>:
====================================================================== */
void __bl_boosterMode(uint8_t enable)
{
  #ifdef PWR_BOOST
    // save current interrupt state
    uint8_t oldSREG = SREG;
    7f14:	9f b7       	in	r25, 0x3f	; 63

    // switch all interrupts off while messing with their settings  
    cli();
    7f16:	f8 94       	cli
    
    // Enable Pull Up on input before setting it output high 
    // see section 14.2.3 of datasheet
    //PWR_BOOST_PORT |= _BV(PWR_BOOST); 
    
    if (enable!=0)
    7f18:	88 23       	and	r24, r24
    7f1a:	11 f0       	breq	.+4      	; 0x7f20 <__bl_boosterMode+0xc>
      // Set booster pin as output 
      // Set pin LOW, this pull CD pin of NCP302 to LOW, triggering
      // reset ouput of NCP302 letting mosfet close and VCC going to enable pin of MCP1640
      // To prevent sketch misconfiguration, we always assume port config 
      // has been lost, so we configure it always from scratch
      PWR_BOOST_DDR  |= _BV(PWR_BOOST);  // Output
    7f1c:	3a 9a       	sbi	0x07, 2	; 7
    7f1e:	01 c0       	rjmp	.+2      	; 0x7f22 <__bl_boosterMode+0xe>
      // Set booster pin as input and disable pull up
      // CD pin of NCP302 will going HIGH, leaving it reset ouput and mosfet 
      // to be close, so enable pin of MCP1640 will go LOW thru pull down
      // To prevent sketch misconfiguration, we always assume port config 
      // has been lost, so we configure it always from scratch
      PWR_BOOST_DDR  &= ~_BV(PWR_BOOST); // Input
    7f20:	3a 98       	cbi	0x07, 2	; 7
      PWR_BOOST_PORT &= ~_BV(PWR_BOOST); // Disable pullup
    7f22:	42 98       	cbi	0x08, 2	; 8
    }

    // clear any pending interrupts for Wake we triggered
    // ULPNode wake pin from booster is on INT1
    EIFR |= _BV(INT1);
    7f24:	e1 9a       	sbi	0x1c, 1	; 28

    // restore interrupt previous state
    SREG = oldSREG; 
    7f26:	9f bf       	out	0x3f, r25	; 63
    7f28:	08 95       	ret

00007f2a <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7f2a:	90 91 c0 00 	lds	r25, 0x00C0
    7f2e:	95 ff       	sbrs	r25, 5
    7f30:	fc cf       	rjmp	.-8      	; 0x7f2a <putch>
  UART_UDR = ch;
    7f32:	80 93 c6 00 	sts	0x00C6, r24
    7f36:	08 95       	ret

00007f38 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7f38:	80 91 c0 00 	lds	r24, 0x00C0
    7f3c:	87 ff       	sbrs	r24, 7
    7f3e:	fc cf       	rjmp	.-8      	; 0x7f38 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7f40:	80 91 c0 00 	lds	r24, 0x00C0
    7f44:	84 fd       	sbrc	r24, 4
    7f46:	01 c0       	rjmp	.+2      	; 0x7f4a <getch+0x12>
  putch(STK_INSYNC);
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f48:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UART_UDR;
    7f4a:	80 91 c6 00 	lds	r24, 0x00C6
#endif
#endif
#endif

  return ch;
}
    7f4e:	08 95       	ret

00007f50 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f50:	e0 e6       	ldi	r30, 0x60	; 96
    7f52:	f0 e0       	ldi	r31, 0x00	; 0
    7f54:	98 e1       	ldi	r25, 0x18	; 24
    7f56:	90 83       	st	Z, r25
  WDTCSR = x;
    7f58:	80 83       	st	Z, r24
    7f5a:	08 95       	ret

00007f5c <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7f5c:	ed df       	rcall	.-38     	; 0x7f38 <getch>
    7f5e:	80 32       	cpi	r24, 0x20	; 32
    7f60:	19 f0       	breq	.+6      	; 0x7f68 <verifySpace+0xc>
    
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7f62:	88 e0       	ldi	r24, 0x08	; 8
    7f64:	f5 df       	rcall	.-22     	; 0x7f50 <watchdogConfig>
    7f66:	ff cf       	rjmp	.-2      	; 0x7f66 <verifySpace+0xa>

    while (1) // and busy-loop so that WD causes
      ;				 //  a reset and app start.
  }
  putch(STK_INSYNC);
    7f68:	84 e1       	ldi	r24, 0x14	; 20
    7f6a:	df cf       	rjmp	.-66     	; 0x7f2a <putch>

00007f6c <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7f6c:	cf 93       	push	r28
    7f6e:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7f70:	e3 df       	rcall	.-58     	; 0x7f38 <getch>
    7f72:	c1 50       	subi	r28, 0x01	; 1
    7f74:	e9 f7       	brne	.-6      	; 0x7f70 <getNch+0x4>
  verifySpace();
}
    7f76:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    7f78:	f1 cf       	rjmp	.-30     	; 0x7f5c <verifySpace>

00007f7a <appStart>:
    (uint16_t) FREQ_MHZ
};


// ================================================================================================================================
void appStart(uint8_t rstFlags) {
    7f7a:	c8 2f       	mov	r28, r24
  // Disable the booster 
  // __bl_boosterDisable();
  
  // Add our managed flags
  #ifdef EEP_FLAGS_MCU_RESET
  eeprom_update_byte(EEP_FLAGS_MCU_RESET, rstFlags);
    7f7c:	68 2f       	mov	r22, r24
    7f7e:	8f ef       	ldi	r24, 0xFF	; 255
    7f80:	93 e0       	ldi	r25, 0x03	; 3
    7f82:	10 d0       	rcall	.+32     	; 0x7fa4 <__eeupd_byte_m328p>
  #endif
  
  #ifdef ULPNODE
    // be sure to set back ULPNode running at 4MHz
    __bl_setCoreFrequency(4);
    7f84:	84 e0       	ldi	r24, 0x04	; 4
    7f86:	63 df       	rcall	.-314    	; 0x7e4e <__bl_setCoreFrequency>
  #endif

  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7f88:	2c 2e       	mov	r2, r28

  // Disbale the watchdog
  watchdogConfig(WATCHDOG_OFF);
    7f8a:	80 e0       	ldi	r24, 0x00	; 0
    7f8c:	e1 df       	rcall	.-62     	; 0x7f50 <watchdogConfig>

 // Start application
  __asm__ __volatile__ (
    7f8e:	ee 27       	eor	r30, r30
    7f90:	ff 27       	eor	r31, r31
    7f92:	09 94       	ijmp

00007f94 <__eerd_byte_m328p>:
    7f94:	f9 99       	sbic	0x1f, 1	; 31
    7f96:	fe cf       	rjmp	.-4      	; 0x7f94 <__eerd_byte_m328p>
    7f98:	92 bd       	out	0x22, r25	; 34
    7f9a:	81 bd       	out	0x21, r24	; 33
    7f9c:	f8 9a       	sbi	0x1f, 0	; 31
    7f9e:	99 27       	eor	r25, r25
    7fa0:	80 b5       	in	r24, 0x20	; 32
    7fa2:	08 95       	ret

00007fa4 <__eeupd_byte_m328p>:
    7fa4:	26 2f       	mov	r18, r22

00007fa6 <__eeupd_r18_m328p>:
    7fa6:	f9 99       	sbic	0x1f, 1	; 31
    7fa8:	fe cf       	rjmp	.-4      	; 0x7fa6 <__eeupd_r18_m328p>
    7faa:	92 bd       	out	0x22, r25	; 34
    7fac:	81 bd       	out	0x21, r24	; 33
    7fae:	f8 9a       	sbi	0x1f, 0	; 31
    7fb0:	01 97       	sbiw	r24, 0x01	; 1
    7fb2:	00 b4       	in	r0, 0x20	; 32
    7fb4:	02 16       	cp	r0, r18
    7fb6:	39 f0       	breq	.+14     	; 0x7fc6 <__eeupd_r18_m328p+0x20>
    7fb8:	1f ba       	out	0x1f, r1	; 31
    7fba:	20 bd       	out	0x20, r18	; 32
    7fbc:	0f b6       	in	r0, 0x3f	; 63
    7fbe:	f8 94       	cli
    7fc0:	fa 9a       	sbi	0x1f, 2	; 31
    7fc2:	f9 9a       	sbi	0x1f, 1	; 31
    7fc4:	0f be       	out	0x3f, r0	; 63
    7fc6:	08 95       	ret

00007fc8 <__eewr_byte_m328p>:
    7fc8:	26 2f       	mov	r18, r22

00007fca <__eewr_r18_m328p>:
    7fca:	f9 99       	sbic	0x1f, 1	; 31
    7fcc:	fe cf       	rjmp	.-4      	; 0x7fca <__eewr_r18_m328p>
    7fce:	1f ba       	out	0x1f, r1	; 31
    7fd0:	92 bd       	out	0x22, r25	; 34
    7fd2:	81 bd       	out	0x21, r24	; 33
    7fd4:	20 bd       	out	0x20, r18	; 32
    7fd6:	0f b6       	in	r0, 0x3f	; 63
    7fd8:	f8 94       	cli
    7fda:	fa 9a       	sbi	0x1f, 2	; 31
    7fdc:	f9 9a       	sbi	0x1f, 1	; 31
    7fde:	0f be       	out	0x3f, r0	; 63
    7fe0:	01 96       	adiw	r24, 0x01	; 1
    7fe2:	08 95       	ret
