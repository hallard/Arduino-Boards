
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d8  00007e00  00007e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00007ffe  00007ffe  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .debug_aranges 00000028  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000074  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003ea  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ef  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000042b  00000000  00000000  000008c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017c  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000300  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b8  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <main>:
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif


/* main program starts here */
int main(void) {
    7e00:	11 24       	eor	r1, r1
   * modified Adaboot no-wait mod.
   * Pass the reset reason to app.  Also, it appears that an Uno poweron
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */
  ch = MCUSR;
    7e02:	94 b7       	in	r25, 0x34	; 52
  MCUSR = 0;
    7e04:	14 be       	out	0x34, r1	; 52
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
    7e06:	89 2f       	mov	r24, r25
    7e08:	8d 70       	andi	r24, 0x0D	; 13
    7e0a:	11 f0       	breq	.+4      	; 0x7e10 <main+0x10>
      appStart(ch);
    7e0c:	89 2f       	mov	r24, r25
    7e0e:	de d0       	rcall	.+444    	; 0x7fcc <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7e10:	85 e0       	ldi	r24, 0x05	; 5
    7e12:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    7e16:	82 e0       	ldi	r24, 0x02	; 2
    7e18:	80 93 c0 00 	sts	0x00C0, r24
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    7e1c:	88 e1       	ldi	r24, 0x18	; 24
    7e1e:	80 93 c1 00 	sts	0x00C1, r24
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    7e22:	86 e0       	ldi	r24, 0x06	; 6
    7e24:	80 93 c2 00 	sts	0x00C2, r24
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7e28:	80 e1       	ldi	r24, 0x10	; 16
    7e2a:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    7e2e:	8e e0       	ldi	r24, 0x0E	; 14
    7e30:	b7 d0       	rcall	.+366    	; 0x7fa0 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7e32:	25 9a       	sbi	0x04, 5	; 4
    7e34:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e36:	20 e3       	ldi	r18, 0x30	; 48
    7e38:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    7e3a:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e3c:	30 93 85 00 	sts	0x0085, r19
    7e40:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    7e44:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7e46:	b0 9b       	sbis	0x16, 0	; 22
    7e48:	fe cf       	rjmp	.-4      	; 0x7e46 <main+0x46>
#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7e4a:	1d 9a       	sbi	0x03, 5	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7e4c:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    7e4e:	81 50       	subi	r24, 0x01	; 1
    7e50:	a9 f7       	brne	.-22     	; 0x7e3c <main+0x3c>
    7e52:	ee 24       	eor	r14, r14
    7e54:	ff 24       	eor	r15, r15
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    7e56:	b3 e0       	ldi	r27, 0x03	; 3
    7e58:	ab 2e       	mov	r10, r27
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7e5a:	bb 24       	eor	r11, r11
    7e5c:	b3 94       	inc	r11
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    7e5e:	a5 e0       	ldi	r26, 0x05	; 5
    7e60:	da 2e       	mov	r13, r26
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    7e62:	f1 e1       	ldi	r31, 0x11	; 17
    7e64:	cf 2e       	mov	r12, r31
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7e66:	90 d0       	rcall	.+288    	; 0x7f88 <getch>

    if(ch == STK_GET_PARAMETER) {
    7e68:	81 34       	cpi	r24, 0x41	; 65
    7e6a:	71 f4       	brne	.+28     	; 0x7e88 <main+0x88>
      unsigned char which = getch();
    7e6c:	8d d0       	rcall	.+282    	; 0x7f88 <getch>
    7e6e:	08 2f       	mov	r16, r24
      verifySpace();
    7e70:	9d d0       	rcall	.+314    	; 0x7fac <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == 0x82) {
    7e72:	02 38       	cpi	r16, 0x82	; 130
    7e74:	11 f4       	brne	.+4      	; 0x7e7a <main+0x7a>
	  putch(optiboot_version & 0xFF);
    7e76:	82 e0       	ldi	r24, 0x02	; 2
    7e78:	05 c0       	rjmp	.+10     	; 0x7e84 <main+0x84>
      } else if (which == 0x81) {
    7e7a:	01 38       	cpi	r16, 0x81	; 129
    7e7c:	11 f4       	brne	.+4      	; 0x7e82 <main+0x82>
	  putch(optiboot_version >> 8);
    7e7e:	86 e0       	ldi	r24, 0x06	; 6
    7e80:	01 c0       	rjmp	.+2      	; 0x7e84 <main+0x84>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    7e82:	83 e0       	ldi	r24, 0x03	; 3
    7e84:	79 d0       	rcall	.+242    	; 0x7f78 <putch>
    7e86:	75 c0       	rjmp	.+234    	; 0x7f72 <main+0x172>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7e88:	82 34       	cpi	r24, 0x42	; 66
    7e8a:	11 f4       	brne	.+4      	; 0x7e90 <main+0x90>
      // SET DEVICE is ignored
      getNch(20);
    7e8c:	84 e1       	ldi	r24, 0x14	; 20
    7e8e:	03 c0       	rjmp	.+6      	; 0x7e96 <main+0x96>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7e90:	85 34       	cpi	r24, 0x45	; 69
    7e92:	19 f4       	brne	.+6      	; 0x7e9a <main+0x9a>
      // SET DEVICE EXT is ignored
      getNch(5);
    7e94:	85 e0       	ldi	r24, 0x05	; 5
    7e96:	92 d0       	rcall	.+292    	; 0x7fbc <getNch>
    7e98:	6c c0       	rjmp	.+216    	; 0x7f72 <main+0x172>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7e9a:	85 35       	cpi	r24, 0x55	; 85
    7e9c:	79 f4       	brne	.+30     	; 0x7ebc <main+0xbc>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7e9e:	74 d0       	rcall	.+232    	; 0x7f88 <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7ea0:	e8 2e       	mov	r14, r24
    7ea2:	ff 24       	eor	r15, r15
    7ea4:	71 d0       	rcall	.+226    	; 0x7f88 <getch>
    7ea6:	08 2f       	mov	r16, r24
    7ea8:	10 e0       	ldi	r17, 0x00	; 0
    7eaa:	10 2f       	mov	r17, r16
    7eac:	00 27       	eor	r16, r16
    7eae:	0e 29       	or	r16, r14
    7eb0:	1f 29       	or	r17, r15
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7eb2:	00 0f       	add	r16, r16
    7eb4:	11 1f       	adc	r17, r17
      address = newAddress;
      verifySpace();
    7eb6:	7a d0       	rcall	.+244    	; 0x7fac <verifySpace>
    7eb8:	78 01       	movw	r14, r16
    7eba:	5b c0       	rjmp	.+182    	; 0x7f72 <main+0x172>
    }
    else if(ch == STK_UNIVERSAL) {
    7ebc:	86 35       	cpi	r24, 0x56	; 86
    7ebe:	21 f4       	brne	.+8      	; 0x7ec8 <main+0xc8>
      // UNIVERSAL command is ignored
      getNch(4);
    7ec0:	84 e0       	ldi	r24, 0x04	; 4
    7ec2:	7c d0       	rcall	.+248    	; 0x7fbc <getNch>
      putch(0x00);
    7ec4:	80 e0       	ldi	r24, 0x00	; 0
    7ec6:	de cf       	rjmp	.-68     	; 0x7e84 <main+0x84>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7ec8:	84 36       	cpi	r24, 0x64	; 100
    7eca:	09 f0       	breq	.+2      	; 0x7ece <main+0xce>
    7ecc:	35 c0       	rjmp	.+106    	; 0x7f38 <main+0x138>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    7ece:	5c d0       	rcall	.+184    	; 0x7f88 <getch>
    7ed0:	5b d0       	rcall	.+182    	; 0x7f88 <getch>
    7ed2:	18 2f       	mov	r17, r24
      savelength = length;
      desttype = getch();
    7ed4:	59 d0       	rcall	.+178    	; 0x7f88 <getch>
    7ed6:	08 2f       	mov	r16, r24
    7ed8:	c0 e0       	ldi	r28, 0x00	; 0
    7eda:	d1 e0       	ldi	r29, 0x01	; 1

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    7edc:	55 d0       	rcall	.+170    	; 0x7f88 <getch>
    7ede:	89 93       	st	Y+, r24
      while (--length);
    7ee0:	1c 17       	cp	r17, r28
    7ee2:	e1 f7       	brne	.-8      	; 0x7edc <main+0xdc>

      // Read command terminator, start reply
      verifySpace();
    7ee4:	63 d0       	rcall	.+198    	; 0x7fac <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    7ee6:	05 34       	cpi	r16, 0x45	; 69
    7ee8:	09 f4       	brne	.+2      	; 0x7eec <main+0xec>
    7eea:	ff cf       	rjmp	.-2      	; 0x7eea <main+0xea>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    7eec:	f7 01       	movw	r30, r14
    7eee:	a7 be       	out	0x37, r10	; 55
    7ef0:	e8 95       	spm
	    boot_spm_busy_wait();
    7ef2:	07 b6       	in	r0, 0x37	; 55
    7ef4:	00 fc       	sbrc	r0, 0
    7ef6:	fd cf       	rjmp	.-6      	; 0x7ef2 <main+0xf2>
    7ef8:	a7 01       	movw	r20, r14
    7efa:	a0 e0       	ldi	r26, 0x00	; 0
    7efc:	b1 e0       	ldi	r27, 0x01	; 1
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    7efe:	2c 91       	ld	r18, X
    7f00:	30 e0       	ldi	r19, 0x00	; 0
		a |= (*bufPtr++) << 8;
    7f02:	11 96       	adiw	r26, 0x01	; 1
    7f04:	8c 91       	ld	r24, X
    7f06:	11 97       	sbiw	r26, 0x01	; 1
    7f08:	90 e0       	ldi	r25, 0x00	; 0
    7f0a:	98 2f       	mov	r25, r24
    7f0c:	88 27       	eor	r24, r24
    7f0e:	82 2b       	or	r24, r18
    7f10:	93 2b       	or	r25, r19
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif


/* main program starts here */
int main(void) {
    7f12:	12 96       	adiw	r26, 0x02	; 2
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7f14:	fa 01       	movw	r30, r20
    7f16:	0c 01       	movw	r0, r24
    7f18:	b7 be       	out	0x37, r11	; 55
    7f1a:	e8 95       	spm
    7f1c:	11 24       	eor	r1, r1
		addrPtr += 2;
    7f1e:	4e 5f       	subi	r20, 0xFE	; 254
    7f20:	5f 4f       	sbci	r21, 0xFF	; 255
	    } while (len -= 2);
    7f22:	1a 17       	cp	r17, r26
    7f24:	61 f7       	brne	.-40     	; 0x7efe <main+0xfe>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    7f26:	f7 01       	movw	r30, r14
    7f28:	d7 be       	out	0x37, r13	; 55
    7f2a:	e8 95       	spm
	    boot_spm_busy_wait();
    7f2c:	07 b6       	in	r0, 0x37	; 55
    7f2e:	00 fc       	sbrc	r0, 0
    7f30:	fd cf       	rjmp	.-6      	; 0x7f2c <main+0x12c>
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    7f32:	c7 be       	out	0x37, r12	; 55
    7f34:	e8 95       	spm
    7f36:	1d c0       	rjmp	.+58     	; 0x7f72 <main+0x172>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7f38:	84 37       	cpi	r24, 0x74	; 116
    7f3a:	69 f4       	brne	.+26     	; 0x7f56 <main+0x156>
      uint8_t desttype;
      GETLENGTH(length);
    7f3c:	25 d0       	rcall	.+74     	; 0x7f88 <getch>
    7f3e:	24 d0       	rcall	.+72     	; 0x7f88 <getch>
    7f40:	08 2f       	mov	r16, r24

      desttype = getch();
    7f42:	22 d0       	rcall	.+68     	; 0x7f88 <getch>

      verifySpace();
    7f44:	33 d0       	rcall	.+102    	; 0x7fac <verifySpace>
    7f46:	e7 01       	movw	r28, r14
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
    7f48:	fe 01       	movw	r30, r28
    7f4a:	85 91       	lpm	r24, Z+
    7f4c:	ef 01       	movw	r28, r30
    7f4e:	14 d0       	rcall	.+40     	; 0x7f78 <putch>
	} while (--length);
    7f50:	01 50       	subi	r16, 0x01	; 1
    7f52:	d1 f7       	brne	.-12     	; 0x7f48 <main+0x148>
    7f54:	0e c0       	rjmp	.+28     	; 0x7f72 <main+0x172>
	  
      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7f56:	85 37       	cpi	r24, 0x75	; 117
    7f58:	39 f4       	brne	.+14     	; 0x7f68 <main+0x168>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7f5a:	28 d0       	rcall	.+80     	; 0x7fac <verifySpace>
      putch(SIGNATURE_0);
    7f5c:	8e e1       	ldi	r24, 0x1E	; 30
    7f5e:	0c d0       	rcall	.+24     	; 0x7f78 <putch>
      putch(SIGNATURE_1);
    7f60:	85 e9       	ldi	r24, 0x95	; 149
    7f62:	0a d0       	rcall	.+20     	; 0x7f78 <putch>
      putch(SIGNATURE_2);
    7f64:	8f e0       	ldi	r24, 0x0F	; 15
    7f66:	8e cf       	rjmp	.-228    	; 0x7e84 <main+0x84>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7f68:	81 35       	cpi	r24, 0x51	; 81
    7f6a:	11 f4       	brne	.+4      	; 0x7f70 <main+0x170>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7f6c:	88 e0       	ldi	r24, 0x08	; 8
    7f6e:	18 d0       	rcall	.+48     	; 0x7fa0 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7f70:	1d d0       	rcall	.+58     	; 0x7fac <verifySpace>
    }
    putch(STK_OK);
    7f72:	80 e1       	ldi	r24, 0x10	; 16
    7f74:	01 d0       	rcall	.+2      	; 0x7f78 <putch>
    7f76:	77 cf       	rjmp	.-274    	; 0x7e66 <main+0x66>

00007f78 <putch>:
  }
}

void putch(char ch) {
    7f78:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7f7a:	80 91 c0 00 	lds	r24, 0x00C0
    7f7e:	85 ff       	sbrs	r24, 5
    7f80:	fc cf       	rjmp	.-8      	; 0x7f7a <putch+0x2>
  UART_UDR = ch;
    7f82:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7f86:	08 95       	ret

00007f88 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7f88:	80 91 c0 00 	lds	r24, 0x00C0
    7f8c:	87 ff       	sbrs	r24, 7
    7f8e:	fc cf       	rjmp	.-8      	; 0x7f88 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7f90:	80 91 c0 00 	lds	r24, 0x00C0
    7f94:	84 fd       	sbrc	r24, 4
    7f96:	01 c0       	rjmp	.+2      	; 0x7f9a <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f98:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UART_UDR;
    7f9a:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7f9e:	08 95       	ret

00007fa0 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fa0:	e0 e6       	ldi	r30, 0x60	; 96
    7fa2:	f0 e0       	ldi	r31, 0x00	; 0
    7fa4:	98 e1       	ldi	r25, 0x18	; 24
    7fa6:	90 83       	st	Z, r25
  WDTCSR = x;
    7fa8:	80 83       	st	Z, r24
}
    7faa:	08 95       	ret

00007fac <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fac:	ed df       	rcall	.-38     	; 0x7f88 <getch>
    7fae:	80 32       	cpi	r24, 0x20	; 32
    7fb0:	19 f0       	breq	.+6      	; 0x7fb8 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7fb2:	88 e0       	ldi	r24, 0x08	; 8
    7fb4:	f5 df       	rcall	.-22     	; 0x7fa0 <watchdogConfig>
    7fb6:	ff cf       	rjmp	.-2      	; 0x7fb6 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fb8:	84 e1       	ldi	r24, 0x14	; 20
}
    7fba:	de cf       	rjmp	.-68     	; 0x7f78 <putch>

00007fbc <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fbc:	1f 93       	push	r17
    7fbe:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    7fc0:	e3 df       	rcall	.-58     	; 0x7f88 <getch>
    7fc2:	11 50       	subi	r17, 0x01	; 1
    7fc4:	e9 f7       	brne	.-6      	; 0x7fc0 <getNch+0x4>
  verifySpace();
    7fc6:	f2 df       	rcall	.-28     	; 0x7fac <verifySpace>
}
    7fc8:	1f 91       	pop	r17
    7fca:	08 95       	ret

00007fcc <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fcc:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7fce:	80 e0       	ldi	r24, 0x00	; 0
    7fd0:	e7 df       	rcall	.-50     	; 0x7fa0 <watchdogConfig>
  __asm__ __volatile__ (
    7fd2:	ee 27       	eor	r30, r30
    7fd4:	ff 27       	eor	r31, r31
    7fd6:	09 94       	ijmp
