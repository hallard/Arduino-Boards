
optiboot_attiny84.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000238  00001d00  00001d00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00001ffe  00001ffe  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .debug_aranges 00000028  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000082  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003e1  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a5  00000000  00000000  00000739  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000042a  00000000  00000000  000008de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000d08  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000185  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000324  00000000  00000000  00000f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d0  00000000  00000000  00001241  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001d00 <main>:
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif


/* main program starts here */
int main(void) {
    1d00:	11 24       	eor	r1, r1
   * modified Adaboot no-wait mod.
   * Pass the reset reason to app.  Also, it appears that an Uno poweron
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */
  ch = MCUSR;
    1d02:	94 b7       	in	r25, 0x34	; 52
  MCUSR = 0;
    1d04:	14 be       	out	0x34, r1	; 52
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
    1d06:	89 2f       	mov	r24, r25
    1d08:	8d 70       	andi	r24, 0x0D	; 13
    1d0a:	11 f0       	breq	.+4      	; 0x1d10 <main+0x10>
      appStart(ch);
    1d0c:	89 2f       	mov	r24, r25
    1d0e:	0e d1       	rcall	.+540    	; 0x1f2c <appStart>
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    1d10:	8e e0       	ldi	r24, 0x0E	; 14
    1d12:	f8 d0       	rcall	.+496    	; 0x1f04 <watchdogConfig>
  LED_DDR |= _BV(LED);
#endif

#ifdef SOFT_UART
  /* Set TX pin as output */
  UART_DDR |= _BV(UART_TX_BIT);
    1d14:	d2 9a       	sbi	0x1a, 2	; 26
    1d16:	ee 24       	eor	r14, r14
    1d18:	ff 24       	eor	r15, r15
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    1d1a:	93 e0       	ldi	r25, 0x03	; 3
    1d1c:	b9 2e       	mov	r11, r25
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    1d1e:	aa 24       	eor	r10, r10
    1d20:	a3 94       	inc	r10
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    1d22:	85 e0       	ldi	r24, 0x05	; 5
    1d24:	98 2e       	mov	r9, r24
        vect -= 4; // Instruction is a relative jump (rjmp), so recalculate.
        buff[8] = vect & 0xff;
        buff[9] = vect >> 8;

        // Add jump to bootloader at RESET vector
        buff[0] = 0x7f;
    1d26:	0f e7       	ldi	r16, 0x7F	; 127
    1d28:	d0 2e       	mov	r13, r16
        buff[1] = 0xce; // rjmp 0x1d00 instruction
    1d2a:	1e ec       	ldi	r17, 0xCE	; 206
    1d2c:	c1 2e       	mov	r12, r17
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1d2e:	d7 d0       	rcall	.+430    	; 0x1ede <getch>

    if(ch == STK_GET_PARAMETER) {
    1d30:	81 34       	cpi	r24, 0x41	; 65
    1d32:	71 f4       	brne	.+28     	; 0x1d50 <main+0x50>
      unsigned char which = getch();
    1d34:	d4 d0       	rcall	.+424    	; 0x1ede <getch>
    1d36:	08 2f       	mov	r16, r24
      verifySpace();
    1d38:	e9 d0       	rcall	.+466    	; 0x1f0c <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == 0x82) {
    1d3a:	02 38       	cpi	r16, 0x82	; 130
    1d3c:	11 f4       	brne	.+4      	; 0x1d42 <main+0x42>
	  putch(optiboot_version & 0xFF);
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	05 c0       	rjmp	.+10     	; 0x1d4c <main+0x4c>
      } else if (which == 0x81) {
    1d42:	01 38       	cpi	r16, 0x81	; 129
    1d44:	11 f4       	brne	.+4      	; 0x1d4a <main+0x4a>
	  putch(optiboot_version >> 8);
    1d46:	86 e0       	ldi	r24, 0x06	; 6
    1d48:	01 c0       	rjmp	.+2      	; 0x1d4c <main+0x4c>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    1d4a:	83 e0       	ldi	r24, 0x03	; 3
    1d4c:	b9 d0       	rcall	.+370    	; 0x1ec0 <putch>
    1d4e:	b5 c0       	rjmp	.+362    	; 0x1eba <main+0x1ba>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    1d50:	82 34       	cpi	r24, 0x42	; 66
    1d52:	11 f4       	brne	.+4      	; 0x1d58 <main+0x58>
      // SET DEVICE is ignored
      getNch(20);
    1d54:	84 e1       	ldi	r24, 0x14	; 20
    1d56:	03 c0       	rjmp	.+6      	; 0x1d5e <main+0x5e>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    1d58:	85 34       	cpi	r24, 0x45	; 69
    1d5a:	19 f4       	brne	.+6      	; 0x1d62 <main+0x62>
      // SET DEVICE EXT is ignored
      getNch(5);
    1d5c:	85 e0       	ldi	r24, 0x05	; 5
    1d5e:	de d0       	rcall	.+444    	; 0x1f1c <verifySpace+0x10>
    1d60:	ac c0       	rjmp	.+344    	; 0x1eba <main+0x1ba>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    1d62:	85 35       	cpi	r24, 0x55	; 85
    1d64:	79 f4       	brne	.+30     	; 0x1d84 <main+0x84>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    1d66:	bb d0       	rcall	.+374    	; 0x1ede <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    1d68:	e8 2e       	mov	r14, r24
    1d6a:	ff 24       	eor	r15, r15
    1d6c:	b8 d0       	rcall	.+368    	; 0x1ede <getch>
    1d6e:	08 2f       	mov	r16, r24
    1d70:	10 e0       	ldi	r17, 0x00	; 0
    1d72:	10 2f       	mov	r17, r16
    1d74:	00 27       	eor	r16, r16
    1d76:	0e 29       	or	r16, r14
    1d78:	1f 29       	or	r17, r15
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    1d7a:	00 0f       	add	r16, r16
    1d7c:	11 1f       	adc	r17, r17
      address = newAddress;
      verifySpace();
    1d7e:	c6 d0       	rcall	.+396    	; 0x1f0c <verifySpace>
    1d80:	78 01       	movw	r14, r16
    1d82:	9b c0       	rjmp	.+310    	; 0x1eba <main+0x1ba>
    }
    else if(ch == STK_UNIVERSAL) {
    1d84:	86 35       	cpi	r24, 0x56	; 86
    1d86:	21 f4       	brne	.+8      	; 0x1d90 <main+0x90>
      // UNIVERSAL command is ignored
      getNch(4);
    1d88:	84 e0       	ldi	r24, 0x04	; 4
    1d8a:	c8 d0       	rcall	.+400    	; 0x1f1c <verifySpace+0x10>
      putch(0x00);
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	de cf       	rjmp	.-68     	; 0x1d4c <main+0x4c>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    1d90:	84 36       	cpi	r24, 0x64	; 100
    1d92:	09 f0       	breq	.+2      	; 0x1d96 <main+0x96>
    1d94:	5e c0       	rjmp	.+188    	; 0x1e52 <main+0x152>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    1d96:	a3 d0       	rcall	.+326    	; 0x1ede <getch>
    1d98:	a2 d0       	rcall	.+324    	; 0x1ede <getch>
    1d9a:	18 2f       	mov	r17, r24
      savelength = length;
      desttype = getch();
    1d9c:	a0 d0       	rcall	.+320    	; 0x1ede <getch>
    1d9e:	08 2f       	mov	r16, r24
    1da0:	c0 e0       	ldi	r28, 0x00	; 0
    1da2:	d1 e0       	ldi	r29, 0x01	; 1

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    1da4:	9c d0       	rcall	.+312    	; 0x1ede <getch>
    1da6:	89 93       	st	Y+, r24
      while (--length);
    1da8:	1c 17       	cp	r17, r28
    1daa:	e1 f7       	brne	.-8      	; 0x1da4 <main+0xa4>

      // Read command terminator, start reply
      verifySpace();
    1dac:	af d0       	rcall	.+350    	; 0x1f0c <verifySpace>

#ifdef VIRTUAL_BOOT_PARTITION
      if ((uint16_t)(void*)address == 0) {
    1dae:	e1 14       	cp	r14, r1
    1db0:	f1 04       	cpc	r15, r1
    1db2:	41 f5       	brne	.+80     	; 0x1e04 <main+0x104>
        // This is the reset vector page. We need to live-patch the code so the
        // bootloader runs.
        //
        // Move RESET vector to WDT vector
        uint16_t vect = buff[0] | (buff[1]<<8);
    1db4:	80 91 00 01 	lds	r24, 0x0100
    1db8:	20 91 01 01 	lds	r18, 0x0101
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	32 2f       	mov	r19, r18
    1dc0:	22 27       	eor	r18, r18
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	28 2b       	or	r18, r24
    1dc6:	39 2b       	or	r19, r25
        rstVect = vect;
    1dc8:	30 93 85 01 	sts	0x0185, r19
    1dcc:	20 93 84 01 	sts	0x0184, r18
        wdtVect = buff[8] | (buff[9]<<8);
    1dd0:	40 91 08 01 	lds	r20, 0x0108
    1dd4:	80 91 09 01 	lds	r24, 0x0109
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	98 2f       	mov	r25, r24
    1ddc:	88 27       	eor	r24, r24
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	84 2b       	or	r24, r20
    1de2:	95 2b       	or	r25, r21
    1de4:	90 93 87 01 	sts	0x0187, r25
    1de8:	80 93 86 01 	sts	0x0186, r24
        vect -= 4; // Instruction is a relative jump (rjmp), so recalculate.
    1dec:	24 50       	subi	r18, 0x04	; 4
    1dee:	30 40       	sbci	r19, 0x00	; 0
        buff[8] = vect & 0xff;
    1df0:	20 93 08 01 	sts	0x0108, r18
        buff[9] = vect >> 8;
    1df4:	23 2f       	mov	r18, r19
    1df6:	33 27       	eor	r19, r19
    1df8:	20 93 09 01 	sts	0x0109, r18

        // Add jump to bootloader at RESET vector
        buff[0] = 0x7f;
    1dfc:	d0 92 00 01 	sts	0x0100, r13
        buff[1] = 0xce; // rjmp 0x1d00 instruction
    1e00:	c0 92 01 01 	sts	0x0101, r12
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    1e04:	05 34       	cpi	r16, 0x45	; 69
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <main+0x10a>
    1e08:	ff cf       	rjmp	.-2      	; 0x1e08 <main+0x108>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    1e0a:	f7 01       	movw	r30, r14
    1e0c:	b7 be       	out	0x37, r11	; 55
    1e0e:	e8 95       	spm
	    boot_spm_busy_wait();
    1e10:	07 b6       	in	r0, 0x37	; 55
    1e12:	00 fc       	sbrc	r0, 0
    1e14:	fd cf       	rjmp	.-6      	; 0x1e10 <main+0x110>
    1e16:	a7 01       	movw	r20, r14
    1e18:	a0 e0       	ldi	r26, 0x00	; 0
    1e1a:	b1 e0       	ldi	r27, 0x01	; 1
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    1e1c:	2c 91       	ld	r18, X
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
		a |= (*bufPtr++) << 8;
    1e20:	11 96       	adiw	r26, 0x01	; 1
    1e22:	8c 91       	ld	r24, X
    1e24:	11 97       	sbiw	r26, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	98 2f       	mov	r25, r24
    1e2a:	88 27       	eor	r24, r24
    1e2c:	82 2b       	or	r24, r18
    1e2e:	93 2b       	or	r25, r19
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif


/* main program starts here */
int main(void) {
    1e30:	12 96       	adiw	r26, 0x02	; 2
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    1e32:	fa 01       	movw	r30, r20
    1e34:	0c 01       	movw	r0, r24
    1e36:	a7 be       	out	0x37, r10	; 55
    1e38:	e8 95       	spm
    1e3a:	11 24       	eor	r1, r1
		addrPtr += 2;
    1e3c:	4e 5f       	subi	r20, 0xFE	; 254
    1e3e:	5f 4f       	sbci	r21, 0xFF	; 255
	    } while (len -= 2);
    1e40:	1a 17       	cp	r17, r26
    1e42:	61 f7       	brne	.-40     	; 0x1e1c <main+0x11c>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    1e44:	f7 01       	movw	r30, r14
    1e46:	97 be       	out	0x37, r9	; 55
    1e48:	e8 95       	spm
	    boot_spm_busy_wait();
    1e4a:	07 b6       	in	r0, 0x37	; 55
    1e4c:	00 fc       	sbrc	r0, 0
    1e4e:	fd cf       	rjmp	.-6      	; 0x1e4a <main+0x14a>
    1e50:	34 c0       	rjmp	.+104    	; 0x1eba <main+0x1ba>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    1e52:	84 37       	cpi	r24, 0x74	; 116
    1e54:	21 f5       	brne	.+72     	; 0x1e9e <main+0x19e>
      uint8_t desttype;
      GETLENGTH(length);
    1e56:	43 d0       	rcall	.+134    	; 0x1ede <getch>
    1e58:	42 d0       	rcall	.+132    	; 0x1ede <getch>
    1e5a:	08 2f       	mov	r16, r24

      desttype = getch();
    1e5c:	40 d0       	rcall	.+128    	; 0x1ede <getch>

      verifySpace();
    1e5e:	56 d0       	rcall	.+172    	; 0x1f0c <verifySpace>
    1e60:	e7 01       	movw	r28, r14
#endif
    default:
	do {
#ifdef VIRTUAL_BOOT_PARTITION
        // Undo vector patch in bottom page so verify passes
	    if (address == 0)       ch=rstVect & 0xff;
    1e62:	20 97       	sbiw	r28, 0x00	; 0
    1e64:	19 f4       	brne	.+6      	; 0x1e6c <main+0x16c>
    1e66:	80 91 84 01 	lds	r24, 0x0184
    1e6a:	14 c0       	rjmp	.+40     	; 0x1e94 <main+0x194>
	    else if (address == 1)  ch=rstVect >> 8;
    1e6c:	c1 30       	cpi	r28, 0x01	; 1
    1e6e:	d1 05       	cpc	r29, r1
    1e70:	19 f4       	brne	.+6      	; 0x1e78 <main+0x178>
    1e72:	80 91 85 01 	lds	r24, 0x0185
    1e76:	0e c0       	rjmp	.+28     	; 0x1e94 <main+0x194>
	    else if (address == 8)  ch=wdtVect & 0xff;
    1e78:	c8 30       	cpi	r28, 0x08	; 8
    1e7a:	d1 05       	cpc	r29, r1
    1e7c:	19 f4       	brne	.+6      	; 0x1e84 <main+0x184>
    1e7e:	80 91 86 01 	lds	r24, 0x0186
    1e82:	08 c0       	rjmp	.+16     	; 0x1e94 <main+0x194>
	    else if (address == 9) ch=wdtVect >> 8;
    1e84:	c9 30       	cpi	r28, 0x09	; 9
    1e86:	d1 05       	cpc	r29, r1
    1e88:	19 f4       	brne	.+6      	; 0x1e90 <main+0x190>
    1e8a:	80 91 87 01 	lds	r24, 0x0187
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <main+0x194>
	    else ch = pgm_read_byte_near(address);
    1e90:	fe 01       	movw	r30, r28
    1e92:	84 91       	lpm	r24, Z+
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
    1e94:	15 d0       	rcall	.+42     	; 0x1ec0 <putch>
	} while (--length);
    1e96:	01 50       	subi	r16, 0x01	; 1
    1e98:	81 f0       	breq	.+32     	; 0x1eba <main+0x1ba>
	    if (address == 0)       ch=rstVect & 0xff;
	    else if (address == 1)  ch=rstVect >> 8;
	    else if (address == 8)  ch=wdtVect & 0xff;
	    else if (address == 9) ch=wdtVect >> 8;
	    else ch = pgm_read_byte_near(address);
	    address++;
    1e9a:	21 96       	adiw	r28, 0x01	; 1
    1e9c:	e2 cf       	rjmp	.-60     	; 0x1e62 <main+0x162>
	  
      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    1e9e:	85 37       	cpi	r24, 0x75	; 117
    1ea0:	39 f4       	brne	.+14     	; 0x1eb0 <main+0x1b0>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    1ea2:	34 d0       	rcall	.+104    	; 0x1f0c <verifySpace>
      putch(SIGNATURE_0);
    1ea4:	8e e1       	ldi	r24, 0x1E	; 30
    1ea6:	0c d0       	rcall	.+24     	; 0x1ec0 <putch>
      putch(SIGNATURE_1);
    1ea8:	83 e9       	ldi	r24, 0x93	; 147
    1eaa:	0a d0       	rcall	.+20     	; 0x1ec0 <putch>
      putch(SIGNATURE_2);
    1eac:	8c e0       	ldi	r24, 0x0C	; 12
    1eae:	4e cf       	rjmp	.-356    	; 0x1d4c <main+0x4c>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    1eb0:	81 35       	cpi	r24, 0x51	; 81
    1eb2:	11 f4       	brne	.+4      	; 0x1eb8 <main+0x1b8>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    1eb4:	88 e0       	ldi	r24, 0x08	; 8
    1eb6:	26 d0       	rcall	.+76     	; 0x1f04 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    1eb8:	29 d0       	rcall	.+82     	; 0x1f0c <verifySpace>
    }
    putch(STK_OK);
    1eba:	80 e1       	ldi	r24, 0x10	; 16
    1ebc:	01 d0       	rcall	.+2      	; 0x1ec0 <putch>
    1ebe:	37 cf       	rjmp	.-402    	; 0x1d2e <main+0x2e>

00001ec0 <putch>:
void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
  UART_UDR = ch;
#else
  __asm__ __volatile__ (
    1ec0:	2a e0       	ldi	r18, 0x0A	; 10
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	80 95       	com	r24
    1ec6:	08 94       	sec
    1ec8:	10 f4       	brcc	.+4      	; 0x1ece <putch+0xe>
    1eca:	da 98       	cbi	0x1b, 2	; 27
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <putch+0x12>
    1ece:	da 9a       	sbi	0x1b, 2	; 27
    1ed0:	00 00       	nop
    1ed2:	14 d0       	rcall	.+40     	; 0x1efc <uartDelay>
    1ed4:	13 d0       	rcall	.+38     	; 0x1efc <uartDelay>
    1ed6:	86 95       	lsr	r24
    1ed8:	2a 95       	dec	r18
    1eda:	b1 f7       	brne	.-20     	; 0x1ec8 <putch+0x8>
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    1edc:	08 95       	ret

00001ede <getch>:
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1ede:	29 e0       	ldi	r18, 0x09	; 9
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	cb 99       	sbic	0x19, 3	; 25
    1ee4:	fe cf       	rjmp	.-4      	; 0x1ee2 <getch+0x4>
    1ee6:	0a d0       	rcall	.+20     	; 0x1efc <uartDelay>
    1ee8:	09 d0       	rcall	.+18     	; 0x1efc <uartDelay>
    1eea:	08 d0       	rcall	.+16     	; 0x1efc <uartDelay>
    1eec:	88 94       	clc
    1eee:	cb 99       	sbic	0x19, 3	; 25
    1ef0:	08 94       	sec
    1ef2:	2a 95       	dec	r18
    1ef4:	11 f0       	breq	.+4      	; 0x1efa <getch+0x1c>
    1ef6:	87 95       	ror	r24
    1ef8:	f7 cf       	rjmp	.-18     	; 0x1ee8 <getch+0xa>
    1efa:	08 95       	ret

00001efc <uartDelay>:
#if UART_B_VALUE > 255
#error Baud rate too slow for soft UART
#endif

void uartDelay() {
  __asm__ __volatile__ (
    1efc:	9e e0       	ldi	r25, 0x0E	; 14
    1efe:	9a 95       	dec	r25
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <uartDelay+0x2>
    1f02:	08 95       	ret

00001f04 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1f04:	98 e1       	ldi	r25, 0x18	; 24
    1f06:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    1f08:	81 bd       	out	0x21, r24	; 33
}
    1f0a:	08 95       	ret

00001f0c <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1f0c:	e8 df       	rcall	.-48     	; 0x1ede <getch>
    1f0e:	80 32       	cpi	r24, 0x20	; 32
    1f10:	19 f0       	breq	.+6      	; 0x1f18 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1f12:	88 e0       	ldi	r24, 0x08	; 8
    1f14:	f7 df       	rcall	.-18     	; 0x1f04 <watchdogConfig>
    1f16:	ff cf       	rjmp	.-2      	; 0x1f16 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    1f18:	84 e1       	ldi	r24, 0x14	; 20
}
    1f1a:	d2 cf       	rjmp	.-92     	; 0x1ec0 <putch>
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1f1c:	1f 93       	push	r17

00001f1e <getNch>:
    1f1e:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    1f20:	de df       	rcall	.-68     	; 0x1ede <getch>
    1f22:	11 50       	subi	r17, 0x01	; 1
    1f24:	e9 f7       	brne	.-6      	; 0x1f20 <getNch+0x2>
  verifySpace();
    1f26:	f2 df       	rcall	.-28     	; 0x1f0c <verifySpace>
}
    1f28:	1f 91       	pop	r17
    1f2a:	08 95       	ret

00001f2c <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    1f2c:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	e9 df       	rcall	.-46     	; 0x1f04 <watchdogConfig>
  __asm__ __volatile__ (
    1f32:	e4 e0       	ldi	r30, 0x04	; 4
    1f34:	ff 27       	eor	r31, r31
    1f36:	09 94       	ijmp
