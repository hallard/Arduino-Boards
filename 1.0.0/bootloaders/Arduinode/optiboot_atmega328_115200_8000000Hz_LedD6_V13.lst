
optiboot_atmega328_115200_8000000Hz_LedD6_V13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000272  00007c00  00007c00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00007ffe  00007ffe  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000028  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000074  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000050f  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000023b  00000000  00000000  00000893  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000056b  00000000  00000000  00000ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  0000103c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000230  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003c6  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d0  00000000  00000000  000016b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007c00 <main>:
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif


/* main program starts here */
int main(void) {
    7c00:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    7c02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7c04:	14 be       	out	0x34, r1	; 52
  // enter the bootloader mode.
  if ( (ch & _BV(EXTRF))==0 || (SWITCH_PORT & _BV(SWITCH_PIN))!=0 )
    appStart(ch);
#else
 //if ( (ch & _BV(EXTRF))==0 || (PIND & 0x01) == 0 )
  if (!(ch & _BV(EXTRF))) 
    7c06:	81 fd       	sbrc	r24, 1
    7c08:	01 c0       	rjmp	.+2      	; 0x7c0c <main+0xc>
    appStart(ch);
    7c0a:	23 d1       	rcall	.+582    	; 0x7e52 <appStart>
  // be reset by original fuses settings so don't forget to change in sketch
    
  // Enable full speed (we should have all power from USB at least 3.3V)
  // so Serial can go up to max defined at bootloader compilation time
  #ifdef BIGBOOT
  clock_prescale_set(clock_div_1);
    7c0c:	80 e0       	ldi	r24, 0x00	; 0
    7c0e:	90 e0       	ldi	r25, 0x00	; 0
    7c10:	20 e8       	ldi	r18, 0x80	; 128
    7c12:	0f b6       	in	r0, 0x3f	; 63
    7c14:	f8 94       	cli
    7c16:	20 93 61 00 	sts	0x0061, r18
    7c1a:	80 93 61 00 	sts	0x0061, r24
    7c1e:	0f be       	out	0x3f, r0	; 63
  #endif
  
#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7c20:	85 e0       	ldi	r24, 0x05	; 5
    7c22:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    7c26:	82 e0       	ldi	r24, 0x02	; 2
    7c28:	80 93 c0 00 	sts	0x00C0, r24
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    7c2c:	88 e1       	ldi	r24, 0x18	; 24
    7c2e:	80 93 c1 00 	sts	0x00C1, r24
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    7c32:	86 e0       	ldi	r24, 0x06	; 6
    7c34:	80 93 c2 00 	sts	0x00C2, r24
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7c38:	88 e0       	ldi	r24, 0x08	; 8
    7c3a:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 1S
  watchdogConfig(WATCHDOG_1S);
    7c3e:	8e e0       	ldi	r24, 0x0E	; 14
    7c40:	f2 d0       	rcall	.+484    	; 0x7e26 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7c42:	56 9a       	sbi	0x0a, 6	; 10
    7c44:	82 e0       	ldi	r24, 0x02	; 2
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7c46:	28 e1       	ldi	r18, 0x18	; 24
    7c48:	3e ef       	ldi	r19, 0xFE	; 254
    TIFR1 = _BV(TOV1);
    7c4a:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7c4c:	30 93 85 00 	sts	0x0085, r19
    7c50:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    7c54:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7c56:	b0 9b       	sbis	0x16, 0	; 22
    7c58:	fe cf       	rjmp	.-4      	; 0x7c56 <main+0x56>
#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7c5a:	4e 9a       	sbi	0x09, 6	; 9
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7c5c:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    7c5e:	81 50       	subi	r24, 0x01	; 1
    7c60:	a9 f7       	brne	.-22     	; 0x7c4c <main+0x4c>
    7c62:	cc 24       	eor	r12, r12
    7c64:	dd 24       	eor	r13, r13
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    7c66:	33 e0       	ldi	r19, 0x03	; 3
    7c68:	73 2e       	mov	r7, r19
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7c6a:	aa 24       	eor	r10, r10
    7c6c:	a3 94       	inc	r10
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    7c6e:	25 e0       	ldi	r18, 0x05	; 5
    7c70:	92 2e       	mov	r9, r18
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    7c72:	91 e1       	ldi	r25, 0x11	; 17
    7c74:	89 2e       	mov	r8, r25
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7c76:	c9 d0       	rcall	.+402    	; 0x7e0a <getch>

    if(ch == STK_GET_PARAMETER) {
    7c78:	81 34       	cpi	r24, 0x41	; 65
    7c7a:	61 f4       	brne	.+24     	; 0x7c94 <main+0x94>
      unsigned char which = getch();
    7c7c:	c6 d0       	rcall	.+396    	; 0x7e0a <getch>
    7c7e:	18 2f       	mov	r17, r24
      verifySpace();
    7c80:	d8 d0       	rcall	.+432    	; 0x7e32 <verifySpace>
      if (which == 0x82) {
    7c82:	12 38       	cpi	r17, 0x82	; 130
    7c84:	29 f1       	breq	.+74     	; 0x7cd0 <main+0xd0>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
      } else if (which == 0x81) {
    7c86:	11 38       	cpi	r17, 0x81	; 129
    7c88:	11 f4       	brne	.+4      	; 0x7c8e <main+0x8e>
	  putch(OPTIBOOT_MAJVER);
    7c8a:	86 e0       	ldi	r24, 0x06	; 6
    7c8c:	01 c0       	rjmp	.+2      	; 0x7c90 <main+0x90>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    7c8e:	83 e0       	ldi	r24, 0x03	; 3
    7c90:	b4 d0       	rcall	.+360    	; 0x7dfa <putch>
    7c92:	b0 c0       	rjmp	.+352    	; 0x7df4 <main+0x1f4>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7c94:	82 34       	cpi	r24, 0x42	; 66
    7c96:	11 f4       	brne	.+4      	; 0x7c9c <main+0x9c>
      // SET DEVICE is ignored
      getNch(20);
    7c98:	84 e1       	ldi	r24, 0x14	; 20
    7c9a:	03 c0       	rjmp	.+6      	; 0x7ca2 <main+0xa2>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7c9c:	85 34       	cpi	r24, 0x45	; 69
    7c9e:	19 f4       	brne	.+6      	; 0x7ca6 <main+0xa6>
      // SET DEVICE EXT is ignored
      getNch(5);
    7ca0:	85 e0       	ldi	r24, 0x05	; 5
    7ca2:	cf d0       	rcall	.+414    	; 0x7e42 <getNch>
    7ca4:	a7 c0       	rjmp	.+334    	; 0x7df4 <main+0x1f4>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7ca6:	85 35       	cpi	r24, 0x55	; 85
    7ca8:	79 f4       	brne	.+30     	; 0x7cc8 <main+0xc8>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7caa:	af d0       	rcall	.+350    	; 0x7e0a <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7cac:	e8 2e       	mov	r14, r24
    7cae:	ff 24       	eor	r15, r15
    7cb0:	ac d0       	rcall	.+344    	; 0x7e0a <getch>
    7cb2:	08 2f       	mov	r16, r24
    7cb4:	10 e0       	ldi	r17, 0x00	; 0
    7cb6:	10 2f       	mov	r17, r16
    7cb8:	00 27       	eor	r16, r16
    7cba:	0e 29       	or	r16, r14
    7cbc:	1f 29       	or	r17, r15
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7cbe:	00 0f       	add	r16, r16
    7cc0:	11 1f       	adc	r17, r17
      address = newAddress;
      verifySpace();
    7cc2:	b7 d0       	rcall	.+366    	; 0x7e32 <verifySpace>
    7cc4:	68 01       	movw	r12, r16
    7cc6:	96 c0       	rjmp	.+300    	; 0x7df4 <main+0x1f4>
    }
    else if(ch == STK_UNIVERSAL) {
    7cc8:	86 35       	cpi	r24, 0x56	; 86
    7cca:	21 f4       	brne	.+8      	; 0x7cd4 <main+0xd4>
      // UNIVERSAL command is ignored
      getNch(4);
    7ccc:	84 e0       	ldi	r24, 0x04	; 4
    7cce:	b9 d0       	rcall	.+370    	; 0x7e42 <getNch>
      putch(0x00);
    7cd0:	80 e0       	ldi	r24, 0x00	; 0
    7cd2:	de cf       	rjmp	.-68     	; 0x7c90 <main+0x90>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7cd4:	84 36       	cpi	r24, 0x64	; 100
    7cd6:	09 f0       	breq	.+2      	; 0x7cda <main+0xda>
    7cd8:	59 c0       	rjmp	.+178    	; 0x7d8c <main+0x18c>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      uint16_t savelength;

      length = getch()<<8;			/* getlen() */
    7cda:	97 d0       	rcall	.+302    	; 0x7e0a <getch>
    7cdc:	90 e0       	ldi	r25, 0x00	; 0
    7cde:	d8 2f       	mov	r29, r24
    7ce0:	cc 27       	eor	r28, r28
      length |= getch();
    7ce2:	93 d0       	rcall	.+294    	; 0x7e0a <getch>
    7ce4:	90 e0       	ldi	r25, 0x00	; 0
    7ce6:	c8 2b       	or	r28, r24
    7ce8:	d9 2b       	or	r29, r25
      savelength = length;
      desttype = getch();
    7cea:	8f d0       	rcall	.+286    	; 0x7e0a <getch>
    7cec:	b8 2e       	mov	r11, r24
    7cee:	8e 01       	movw	r16, r28
    7cf0:	e1 2c       	mov	r14, r1
    7cf2:	f1 e0       	ldi	r31, 0x01	; 1
    7cf4:	ff 2e       	mov	r15, r31

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    7cf6:	89 d0       	rcall	.+274    	; 0x7e0a <getch>
    7cf8:	f7 01       	movw	r30, r14
    7cfa:	81 93       	st	Z+, r24
    7cfc:	7f 01       	movw	r14, r30
      while (--length);
    7cfe:	01 50       	subi	r16, 0x01	; 1
    7d00:	10 40       	sbci	r17, 0x00	; 0
    7d02:	c9 f7       	brne	.-14     	; 0x7cf6 <main+0xf6>

      // Read command terminator, start reply
      verifySpace();
    7d04:	96 d0       	rcall	.+300    	; 0x7e32 <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, uint16_t len)
{
    switch (memtype) {
    7d06:	f5 e4       	ldi	r31, 0x45	; 69
    7d08:	bf 16       	cp	r11, r31
    7d0a:	c1 f4       	brne	.+48     	; 0x7d3c <main+0x13c>
    7d0c:	96 01       	movw	r18, r12
    7d0e:	e0 e0       	ldi	r30, 0x00	; 0
    7d10:	f1 e0       	ldi	r31, 0x01	; 1
    7d12:	11 c0       	rjmp	.+34     	; 0x7d36 <main+0x136>
    case 'E': // EEPROM
#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
        while(len--) {
	    eeprom_write_byte((uint8_t *)(address++), *mybuff++);
    7d14:	40 81       	ld	r20, Z
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    7d16:	f9 99       	sbic	0x1f, 1	; 31
    7d18:	fe cf       	rjmp	.-4      	; 0x7d16 <main+0x116>
    7d1a:	c9 01       	movw	r24, r18
    7d1c:	01 96       	adiw	r24, 0x01	; 1
    7d1e:	31 96       	adiw	r30, 0x01	; 1

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    7d20:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    7d22:	32 bd       	out	0x22, r19	; 34
    7d24:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
    7d26:	40 bd       	out	0x20, r20	; 32

    __asm__ __volatile__ (
    7d28:	0f b6       	in	r0, 0x3f	; 63
    7d2a:	f8 94       	cli
    7d2c:	fa 9a       	sbi	0x1f, 2	; 31
    7d2e:	f9 9a       	sbi	0x1f, 1	; 31
    7d30:	0f be       	out	0x3f, r0	; 63
    7d32:	21 97       	sbiw	r28, 0x01	; 1
    7d34:	9c 01       	movw	r18, r24
			       uint16_t address, uint16_t len)
{
    switch (memtype) {
    case 'E': // EEPROM
#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
        while(len--) {
    7d36:	20 97       	sbiw	r28, 0x00	; 0
    7d38:	69 f7       	brne	.-38     	; 0x7d14 <main+0x114>
    7d3a:	5c c0       	rjmp	.+184    	; 0x7df4 <main+0x1f4>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    7d3c:	f6 01       	movw	r30, r12
    7d3e:	77 be       	out	0x37, r7	; 55
    7d40:	e8 95       	spm
	    boot_spm_busy_wait();
    7d42:	07 b6       	in	r0, 0x37	; 55
    7d44:	00 fc       	sbrc	r0, 0
    7d46:	fd cf       	rjmp	.-6      	; 0x7d42 <main+0x142>
    7d48:	b6 01       	movw	r22, r12
    7d4a:	ae 01       	movw	r20, r28
    7d4c:	a0 e0       	ldi	r26, 0x00	; 0
    7d4e:	b1 e0       	ldi	r27, 0x01	; 1
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    7d50:	2c 91       	ld	r18, X
    7d52:	30 e0       	ldi	r19, 0x00	; 0
		a |= (*bufPtr++) << 8;
    7d54:	11 96       	adiw	r26, 0x01	; 1
    7d56:	8c 91       	ld	r24, X
    7d58:	11 97       	sbiw	r26, 0x01	; 1
    7d5a:	90 e0       	ldi	r25, 0x00	; 0
    7d5c:	98 2f       	mov	r25, r24
    7d5e:	88 27       	eor	r24, r24
    7d60:	82 2b       	or	r24, r18
    7d62:	93 2b       	or	r25, r19
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif


/* main program starts here */
int main(void) {
    7d64:	12 96       	adiw	r26, 0x02	; 2
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7d66:	fb 01       	movw	r30, r22
    7d68:	0c 01       	movw	r0, r24
    7d6a:	a7 be       	out	0x37, r10	; 55
    7d6c:	e8 95       	spm
    7d6e:	11 24       	eor	r1, r1
		addrPtr += 2;
    7d70:	6e 5f       	subi	r22, 0xFE	; 254
    7d72:	7f 4f       	sbci	r23, 0xFF	; 255
	    } while (len -= 2);
    7d74:	42 50       	subi	r20, 0x02	; 2
    7d76:	50 40       	sbci	r21, 0x00	; 0
    7d78:	59 f7       	brne	.-42     	; 0x7d50 <main+0x150>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    7d7a:	f6 01       	movw	r30, r12
    7d7c:	97 be       	out	0x37, r9	; 55
    7d7e:	e8 95       	spm
	    boot_spm_busy_wait();
    7d80:	07 b6       	in	r0, 0x37	; 55
    7d82:	00 fc       	sbrc	r0, 0
    7d84:	fd cf       	rjmp	.-6      	; 0x7d80 <main+0x180>
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    7d86:	87 be       	out	0x37, r8	; 55
    7d88:	e8 95       	spm
    7d8a:	34 c0       	rjmp	.+104    	; 0x7df4 <main+0x1f4>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7d8c:	84 37       	cpi	r24, 0x74	; 116
    7d8e:	21 f5       	brne	.+72     	; 0x7dd8 <main+0x1d8>
      uint8_t desttype;
      length = getch()<<8;			/* getlen() */
    7d90:	3c d0       	rcall	.+120    	; 0x7e0a <getch>
    7d92:	90 e0       	ldi	r25, 0x00	; 0
    7d94:	d8 2f       	mov	r29, r24
    7d96:	cc 27       	eor	r28, r28
      length |= getch();
    7d98:	38 d0       	rcall	.+112    	; 0x7e0a <getch>
    7d9a:	90 e0       	ldi	r25, 0x00	; 0
    7d9c:	c8 2b       	or	r28, r24
    7d9e:	d9 2b       	or	r29, r25
      desttype = getch();
    7da0:	34 d0       	rcall	.+104    	; 0x7e0a <getch>
    7da2:	18 2f       	mov	r17, r24

      verifySpace();
    7da4:	46 d0       	rcall	.+140    	; 0x7e32 <verifySpace>

static inline void read_mem(uint8_t memtype, uint16_t address, uint16_t length)
{
    uint8_t ch;

    switch (memtype) {
    7da6:	15 34       	cpi	r17, 0x45	; 69
    7da8:	79 f4       	brne	.+30     	; 0x7dc8 <main+0x1c8>
    7daa:	c6 01       	movw	r24, r12

#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
    case 'E': // EEPROM
	do {
	    putch(eeprom_read_byte((uint8_t *)(address++)));
    7dac:	8c 01       	movw	r16, r24
    7dae:	0f 5f       	subi	r16, 0xFF	; 255
    7db0:	1f 4f       	sbci	r17, 0xFF	; 255
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    7db2:	f9 99       	sbic	0x1f, 1	; 31
    7db4:	fe cf       	rjmp	.-4      	; 0x7db2 <main+0x1b2>
#if E2END <= 0xFF
    EEARL = (uint8_t)(uint16_t)__p;
#else
    EEAR = (uint16_t)__p;
    7db6:	92 bd       	out	0x22, r25	; 34
    7db8:	81 bd       	out	0x21, r24	; 33
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    7dba:	f8 9a       	sbi	0x1f, 0	; 31
    7dbc:	80 b5       	in	r24, 0x20	; 32
    7dbe:	1d d0       	rcall	.+58     	; 0x7dfa <putch>
	} while (--length);
    7dc0:	21 97       	sbiw	r28, 0x01	; 1
    7dc2:	c1 f0       	breq	.+48     	; 0x7df4 <main+0x1f4>
    7dc4:	c8 01       	movw	r24, r16
    7dc6:	f2 cf       	rjmp	.-28     	; 0x7dac <main+0x1ac>
    7dc8:	86 01       	movw	r16, r12
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
    7dca:	f8 01       	movw	r30, r16
    7dcc:	85 91       	lpm	r24, Z+
    7dce:	8f 01       	movw	r16, r30
    7dd0:	14 d0       	rcall	.+40     	; 0x7dfa <putch>
	} while (--length);
    7dd2:	21 97       	sbiw	r28, 0x01	; 1
    7dd4:	d1 f7       	brne	.-12     	; 0x7dca <main+0x1ca>
    7dd6:	0e c0       	rjmp	.+28     	; 0x7df4 <main+0x1f4>
	  
      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7dd8:	85 37       	cpi	r24, 0x75	; 117
    7dda:	39 f4       	brne	.+14     	; 0x7dea <main+0x1ea>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7ddc:	2a d0       	rcall	.+84     	; 0x7e32 <verifySpace>
      putch(SIGNATURE_0);
    7dde:	8e e1       	ldi	r24, 0x1E	; 30
    7de0:	0c d0       	rcall	.+24     	; 0x7dfa <putch>
      putch(SIGNATURE_1);
    7de2:	85 e9       	ldi	r24, 0x95	; 149
    7de4:	0a d0       	rcall	.+20     	; 0x7dfa <putch>
      putch(SIGNATURE_2);
    7de6:	8f e0       	ldi	r24, 0x0F	; 15
    7de8:	53 cf       	rjmp	.-346    	; 0x7c90 <main+0x90>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7dea:	81 35       	cpi	r24, 0x51	; 81
    7dec:	11 f4       	brne	.+4      	; 0x7df2 <main+0x1f2>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7dee:	88 e0       	ldi	r24, 0x08	; 8
    7df0:	1a d0       	rcall	.+52     	; 0x7e26 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7df2:	1f d0       	rcall	.+62     	; 0x7e32 <verifySpace>
    }
    putch(STK_OK);
    7df4:	80 e1       	ldi	r24, 0x10	; 16
    7df6:	01 d0       	rcall	.+2      	; 0x7dfa <putch>
    7df8:	3e cf       	rjmp	.-388    	; 0x7c76 <main+0x76>

00007dfa <putch>:
  }
}

void putch(char ch) {
    7dfa:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7dfc:	80 91 c0 00 	lds	r24, 0x00C0
    7e00:	85 ff       	sbrs	r24, 5
    7e02:	fc cf       	rjmp	.-8      	; 0x7dfc <putch+0x2>
  UART_UDR = ch;
    7e04:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7e08:	08 95       	ret

00007e0a <getch>:

#ifdef LED_DATA_FLASH
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
  LED_PORT ^= _BV(LED);
#else
  LED_PIN |= _BV(LED);
    7e0a:	4e 9a       	sbi	0x09, 6	; 9
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7e0c:	80 91 c0 00 	lds	r24, 0x00C0
    7e10:	87 ff       	sbrs	r24, 7
    7e12:	fc cf       	rjmp	.-8      	; 0x7e0c <getch+0x2>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7e14:	80 91 c0 00 	lds	r24, 0x00C0
    7e18:	84 fd       	sbrc	r24, 4
    7e1a:	01 c0       	rjmp	.+2      	; 0x7e1e <getch+0x14>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7e1c:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UART_UDR;
    7e1e:	80 91 c6 00 	lds	r24, 0x00C6

#ifdef LED_DATA_FLASH
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
  LED_PORT ^= _BV(LED);
#else
  LED_PIN |= _BV(LED);
    7e22:	4e 9a       	sbi	0x09, 6	; 9
#endif
#endif

  return ch;
}
    7e24:	08 95       	ret

00007e26 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7e26:	e0 e6       	ldi	r30, 0x60	; 96
    7e28:	f0 e0       	ldi	r31, 0x00	; 0
    7e2a:	98 e1       	ldi	r25, 0x18	; 24
    7e2c:	90 83       	st	Z, r25
  WDTCSR = x;
    7e2e:	80 83       	st	Z, r24
}
    7e30:	08 95       	ret

00007e32 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7e32:	eb df       	rcall	.-42     	; 0x7e0a <getch>
    7e34:	80 32       	cpi	r24, 0x20	; 32
    7e36:	19 f0       	breq	.+6      	; 0x7e3e <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7e38:	88 e0       	ldi	r24, 0x08	; 8
    7e3a:	f5 df       	rcall	.-22     	; 0x7e26 <watchdogConfig>
    7e3c:	ff cf       	rjmp	.-2      	; 0x7e3c <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7e3e:	84 e1       	ldi	r24, 0x14	; 20
}
    7e40:	dc cf       	rjmp	.-72     	; 0x7dfa <putch>

00007e42 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7e42:	1f 93       	push	r17
    7e44:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    7e46:	e1 df       	rcall	.-62     	; 0x7e0a <getch>
    7e48:	11 50       	subi	r17, 0x01	; 1
    7e4a:	e9 f7       	brne	.-6      	; 0x7e46 <getNch+0x4>
  verifySpace();
    7e4c:	f2 df       	rcall	.-28     	; 0x7e32 <verifySpace>
}
    7e4e:	1f 91       	pop	r17
    7e50:	08 95       	ret

00007e52 <appStart>:
  // Restore back clock prescaler to CKDIV8 before starting the Application
  // because if we entered into bootloader upload we changed it to full speed
  // we're sure it will work, after that the application will be able to 
  // speed up speed if needed by changing the clock prescaler 
  #ifdef BIGBOOT
  clock_prescale_set(clock_div_8);
    7e52:	23 e0       	ldi	r18, 0x03	; 3
    7e54:	30 e0       	ldi	r19, 0x00	; 0
    7e56:	90 e8       	ldi	r25, 0x80	; 128
    7e58:	0f b6       	in	r0, 0x3f	; 63
    7e5a:	f8 94       	cli
    7e5c:	90 93 61 00 	sts	0x0061, r25
    7e60:	20 93 61 00 	sts	0x0061, r18
    7e64:	0f be       	out	0x3f, r0	; 63
  #endif

  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7e66:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7e68:	80 e0       	ldi	r24, 0x00	; 0
    7e6a:	dd df       	rcall	.-70     	; 0x7e26 <watchdogConfig>
  __asm__ __volatile__ (
    7e6c:	ee 27       	eor	r30, r30
    7e6e:	ff 27       	eor	r31, r31
    7e70:	09 94       	ijmp
